/* The following code was generated by JFlex 1.4.1 on 12/29/11 5:49 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package com.dubture.twig.core.parser.ast.scanner;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.php.internal.core.ast.nodes.IDocumentorLexer;
import org.eclipse.php.internal.core.ast.nodes.Comment;
import java_cup.sym;
import org.eclipse.php.internal.core.ast.nodes.AST;
import java_cup.runtime.Symbol;
import org.eclipse.php.internal.core.ast.scanner.StateStack;
import org.eclipse.php.internal.core.PHPVersion;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 12/29/11 5:49 PM from the specification file
 * <tt>ast_scanner.flex</tt>
 */
public class TwigAstLexer implements org.eclipse.php.internal.core.ast.scanner.AstLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 8;
  public static final int ST_IN_SCRIPTING = 1;
  public static final int ST_LOOKING_FOR_PROPERTY = 4;
  public static final int ST_ONE_LINE_COMMENT = 9;
  public static final int ST_BACKQUOTE = 3;
  public static final int ST_COMMENT = 7;
  public static final int ST_DOUBLE_QUOTES = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_VAR_OFFSET = 6;
  public static final int ST_LOOKING_FOR_VARNAME = 5;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\11\2\0\1\13\22\0\1\12\1\47\1\15\1\67"+
    "\1\14\1\46\1\42\1\66\1\36\1\37\1\44\1\4\1\33\1\23"+
    "\1\2\1\43\1\5\11\1\1\32\1\31\1\51\1\45\1\24\1\52"+
    "\1\53\1\21\1\71\1\56\1\30\1\3\1\7\1\63\1\65\1\57"+
    "\2\10\1\62\1\10\1\27\1\25\1\60\1\10\1\26\1\22\1\61"+
    "\1\64\1\70\1\10\1\6\2\10\1\34\1\16\1\35\1\41\1\10"+
    "\1\17\1\21\1\71\1\56\1\30\1\3\1\7\1\63\1\65\1\57"+
    "\2\10\1\62\1\10\1\27\1\25\1\60\1\10\1\26\1\55\1\61"+
    "\1\64\1\70\1\10\1\6\2\10\1\20\1\40\1\54\1\50\201\10"+
    "\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\5\1\14\1\15"+
    "\1\5\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\2\1\42\1\5"+
    "\1\43\1\2\1\44\2\2\1\43\2\2\1\45\1\2"+
    "\1\46\1\47\1\46\1\50\1\51\1\52\1\4\1\52"+
    "\1\53\1\54\1\55\1\56\1\14\1\57\1\30\1\36"+
    "\1\37\1\60\1\7\1\61\3\7\3\62\1\61\1\0"+
    "\1\63\1\1\1\64\2\0\1\65\2\0\1\66\2\0"+
    "\1\67\1\5\1\70\1\71\1\72\1\0\1\73\5\0"+
    "\1\65\2\74\1\75\1\76\1\74\3\0\3\77\1\100"+
    "\1\101\1\0\1\102\1\103\2\0\1\64\1\0\1\64"+
    "\1\104\1\0\1\105\2\0\2\73\1\0\1\106\1\101"+
    "\2\0\1\107\7\0\1\110\2\111\22\0\1\112\20\0"+
    "\1\63\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u02b8\0\u03a0\0\u03da\0\u0414\0\u044e\0\u02b8\0\u02b8\0\u0488"+
    "\0\u04c2\0\u02b8\0\u04fc\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u02b8"+
    "\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u0536\0\u02b8\0\u02b8"+
    "\0\u02b8\0\u02b8\0\u02b8\0\u0570\0\u05aa\0\u02b8\0\u02b8\0\u05e4"+
    "\0\u02b8\0\u061e\0\u0658\0\u0692\0\u02b8\0\u06cc\0\u0706\0\u0740"+
    "\0\u077a\0\u07b4\0\u02b8\0\u07ee\0\u02b8\0\u0828\0\u0862\0\u02b8"+
    "\0\u089c\0\u08d6\0\u02b8\0\u0910\0\u02b8\0\u02b8\0\u02b8\0\u02b8"+
    "\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u02b8\0\u094a\0\u0984"+
    "\0\u02b8\0\u09be\0\u09f8\0\u0a32\0\u02b8\0\u0a6c\0\u02b8\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u044e\0\u0c3c"+
    "\0\u02b8\0\u0c76\0\u0cb0\0\u0366\0\u0cea\0\u02b8\0\u0366\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u05e4\0\u0dd2\0\u0e0c\0\u06cc\0\u0e46\0\u0e80"+
    "\0\u0e0c\0\u02b8\0\u02b8\0\u02b8\0\u0e46\0\u0eba\0\u07b4\0\u0ef4"+
    "\0\u0eba\0\u02b8\0\u0ef4\0\u02b8\0\u0f2e\0\u0f68\0\u02b8\0\u02b8"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1016\0\u0bc8\0\u0366\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u02b8\0\u1138\0\u1172\0\u02b8\0\u0f68\0\u11ac"+
    "\0\u11e6\0\u02b8\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u02b8\0\u02b8\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e"+
    "\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u02b8\0\u1804"+
    "\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u02b8"+
    "\0\u1ba4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\51\13\1\14\20\13\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\3\20\3\23\1\24\1\25\1\15\1\26\1\27"+
    "\1\30\1\20\1\31\1\32\1\33\3\20\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\11\20\1\60\1\61\1\20\1\62\14\63"+
    "\1\64\1\65\1\66\1\63\1\67\51\63\14\70\1\71"+
    "\1\70\1\72\1\73\1\74\51\70\3\75\1\76\2\75"+
    "\3\76\3\23\5\75\2\76\1\77\1\75\4\76\24\75"+
    "\11\76\2\75\2\76\3\100\1\101\2\100\3\101\10\100"+
    "\2\101\2\100\4\101\24\100\11\101\2\100\2\101\1\15"+
    "\1\102\1\103\1\20\1\21\1\104\3\20\3\105\1\24"+
    "\1\106\1\105\1\107\1\110\2\20\1\111\1\32\4\20"+
    "\1\34\1\35\1\36\1\37\1\112\1\41\1\42\1\43"+
    "\1\44\1\45\1\113\1\47\1\50\1\51\1\52\1\53"+
    "\1\114\1\115\1\56\1\116\11\20\2\105\2\20\44\117"+
    "\1\120\25\117\13\121\1\122\30\121\1\123\25\121\11\124"+
    "\1\125\1\124\1\126\10\124\1\127\21\124\1\127\3\124"+
    "\1\127\17\124\51\13\1\130\66\13\1\0\2\13\1\0"+
    "\1\131\2\13\1\132\14\13\73\0\1\16\1\133\1\134"+
    "\1\0\1\16\65\0\1\133\3\0\1\133\65\0\1\20"+
    "\1\0\1\20\1\0\4\20\10\0\2\20\2\0\4\20"+
    "\24\0\11\20\2\0\2\20\1\0\1\16\1\133\1\134"+
    "\1\0\1\16\1\135\74\0\3\23\61\0\1\136\2\0"+
    "\3\136\10\0\2\136\2\0\4\136\24\0\11\136\2\0"+
    "\2\136\14\137\1\140\1\141\1\142\1\137\1\143\51\137"+
    "\1\0\1\20\1\0\1\20\1\0\4\20\10\0\1\20"+
    "\1\144\2\0\2\20\1\145\1\20\24\0\1\144\10\20"+
    "\2\0\2\20\24\0\1\146\46\0\1\20\1\0\1\20"+
    "\1\0\4\20\10\0\2\20\2\0\1\20\1\147\2\20"+
    "\24\0\11\20\2\0\2\20\43\0\1\61\1\150\70\0"+
    "\1\151\52\0\1\152\45\0\16\153\1\154\47\153\1\141"+
    "\3\153\1\0\1\20\1\0\1\20\1\0\4\20\4\0"+
    "\1\25\3\0\2\20\2\0\4\20\24\0\11\20\1\153"+
    "\1\0\2\20\14\63\1\155\1\0\1\156\1\63\1\157"+
    "\54\63\1\160\2\63\3\160\3\63\1\161\1\162\1\156"+
    "\1\63\1\163\2\160\2\63\4\160\24\63\11\160\2\63"+
    "\2\160\106\63\1\164\1\162\1\156\1\63\1\165\51\63"+
    "\14\70\1\166\1\70\1\167\1\0\1\170\54\70\1\160"+
    "\2\70\3\160\3\70\1\171\1\70\1\167\1\172\1\163"+
    "\2\160\2\70\4\160\24\70\11\160\2\70\2\160\106\70"+
    "\1\164\1\70\1\167\1\172\1\173\51\70\1\0\1\76"+
    "\1\0\1\76\1\0\4\76\10\0\2\76\2\0\4\76"+
    "\24\0\11\76\2\0\2\76\24\0\1\174\46\0\1\101"+
    "\1\0\1\101\1\0\4\101\10\0\2\101\2\0\4\101"+
    "\24\0\11\101\2\0\2\101\1\0\1\102\3\0\1\102"+
    "\65\0\1\175\3\0\1\175\1\176\63\0\44\117\1\0"+
    "\25\117\43\0\1\177\37\0\1\121\123\0\1\200\26\0"+
    "\11\124\1\125\1\124\1\126\10\124\1\125\21\124\1\125"+
    "\3\124\1\125\17\124\11\0\1\125\60\0\46\13\1\0"+
    "\2\13\2\0\2\13\1\0\14\13\60\0\1\201\67\0"+
    "\1\202\14\0\1\133\1\0\1\134\1\0\1\133\65\0"+
    "\1\203\2\0\1\204\1\203\15\0\1\204\47\0\1\205"+
    "\1\0\1\205\1\0\1\205\1\0\1\205\11\0\1\205"+
    "\6\0\1\205\25\0\1\205\12\0\1\205\1\0\1\136"+
    "\1\0\1\136\1\0\4\136\10\0\2\136\2\0\4\136"+
    "\24\0\11\136\2\0\2\136\3\137\1\0\2\137\3\0"+
    "\3\137\1\140\1\141\1\142\1\137\3\0\2\137\4\0"+
    "\24\137\11\0\2\137\2\0\106\137\1\0\1\141\1\142"+
    "\1\137\1\143\51\137\1\0\1\20\1\0\1\20\1\0"+
    "\4\20\10\0\2\20\2\0\3\20\1\206\24\0\11\20"+
    "\2\0\2\20\11\0\3\207\30\0\1\210\6\0\1\211"+
    "\40\0\1\212\32\0\1\212\25\0\1\213\1\0\1\214"+
    "\56\0\72\153\3\63\1\0\2\63\3\0\3\63\1\161"+
    "\1\162\1\156\1\63\3\0\2\63\4\0\24\63\11\0"+
    "\2\63\2\0\14\63\1\0\1\162\1\156\1\63\1\165"+
    "\51\63\1\0\1\160\1\0\1\160\1\0\4\160\10\0"+
    "\2\160\1\215\1\0\4\160\3\0\1\216\20\0\11\160"+
    "\2\0\2\160\3\70\1\0\2\70\3\0\3\70\1\171"+
    "\1\70\1\167\1\172\3\0\2\70\4\0\24\70\11\0"+
    "\2\70\2\0\14\70\1\0\1\70\1\167\1\172\1\173"+
    "\51\70\1\0\1\175\3\0\1\175\65\0\1\217\1\0"+
    "\1\217\1\0\1\217\1\0\1\217\11\0\1\217\6\0"+
    "\1\217\25\0\1\217\12\0\1\217\65\0\1\220\32\0"+
    "\1\221\44\0\1\203\3\0\1\203\75\0\3\207\37\0"+
    "\1\211\61\0\1\222\116\0\1\223\57\0\1\224\24\0"+
    "\1\213\104\0\1\225\125\0\1\226\70\0\1\227\33\0"+
    "\1\230\76\0\1\231\46\0\1\232\2\0\3\232\10\0"+
    "\2\232\2\0\4\232\24\0\11\232\2\0\2\232\11\0"+
    "\2\233\1\234\136\0\1\235\37\0\1\236\122\0\1\237"+
    "\23\0\1\233\141\0\1\240\21\0\3\241\136\0\1\242"+
    "\22\0\3\243\61\0\1\244\2\0\3\244\3\241\1\245"+
    "\4\0\2\244\2\0\4\244\24\0\11\244\2\0\2\244"+
    "\61\0\1\246\21\0\3\243\46\0\1\247\10\0\1\244"+
    "\1\0\1\244\1\0\4\244\3\250\5\0\2\244\2\0"+
    "\4\244\24\0\11\244\2\0\2\244\3\0\1\244\2\0"+
    "\3\244\10\0\2\244\2\0\4\244\24\0\11\244\2\0"+
    "\2\244\11\0\3\246\10\0\1\152\66\0\1\251\53\0"+
    "\1\252\2\0\3\252\3\250\2\0\1\253\2\0\2\252"+
    "\2\0\4\252\7\0\1\253\3\0\1\254\10\0\11\252"+
    "\2\0\2\252\27\0\1\255\43\0\1\252\1\0\1\252"+
    "\1\0\4\252\3\256\2\0\1\253\2\0\2\252\2\0"+
    "\4\252\7\0\1\253\3\0\1\254\10\0\11\252\2\0"+
    "\2\252\3\0\1\252\2\0\3\252\3\256\2\0\1\253"+
    "\2\0\2\252\2\0\4\252\7\0\1\253\3\0\1\254"+
    "\10\0\11\252\2\0\2\252\43\0\1\257\111\0\1\260"+
    "\17\0\3\256\30\0\1\254\111\0\1\261\26\0\1\262"+
    "\133\0\1\263\11\0\1\264\77\0\3\264\31\0\1\265"+
    "\35\0\3\265\1\0\1\266\42\0\1\267\5\0\1\270"+
    "\63\0\1\271\76\0\1\272\64\0\1\273\76\0\1\274"+
    "\64\0\1\275\76\0\1\276\64\0\1\277\22\0\3\275"+
    "\10\0\1\300\125\0\1\301\26\0\1\275\142\0\1\275"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7134];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\1\1\11\3\1\1\11\4\1\2\11\2\1"+
    "\1\11\1\1\12\11\1\1\5\11\2\1\2\11\1\1"+
    "\1\11\3\1\1\11\5\1\1\11\1\1\1\11\2\1"+
    "\1\11\2\1\1\11\1\1\12\11\2\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\0\3\1\2\0\1\1\2\0"+
    "\1\11\2\0\2\1\1\11\2\1\1\0\1\1\5\0"+
    "\2\1\3\11\1\1\3\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\11\2\0\1\1\1\0\2\1\1\0"+
    "\1\1\2\0\1\11\1\1\1\0\1\11\1\1\2\0"+
    "\1\11\7\0\2\11\1\1\22\0\1\11\20\0\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private final LinkedList commentList = new LinkedList();	
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;

	private AST ast;

    public void setAST(AST ast) {
    	this.ast = ast;
    }
    
	public PHPVersion getPHPVersion() {
		return PHPVersion.PHP5_3;
	}
    
	public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}
	
	public LinkedList getCommentList() {
		return commentList;
	}	
	
	protected void addComment(int type) {
		int leftPosition = getTokenStartPosition();
		Comment comment = new Comment(commentStartPosition, leftPosition + getTokenLength(), ast, type);
		commentList.add(comment);
	}	
	
	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {

	}
	
	public void setUseShortTags(boolean useShortTags) {

	}
	
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
		commentStartPosition = getTokenStartPosition();
	}
	
	private void handleLineCommentEnd() {
         addComment(Comment.TYPE_SINGLE_LINE);
    }
    
    private void handleMultilineCommentEnd() {
    	addComment(Comment.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
		addComment(Comment.TYPE_PHPDOC);
    }
    
    protected void handleVarComment() {
    	commentStartPosition = zzStartRead;
    	addComment(Comment.TYPE_MULTILINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    protected Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        return new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
	protected boolean parsePHPDoc(){	
		final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());
		return true;
	}
	
	
	protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}
	
	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];  
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TwigAstLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TwigAstLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { return createFullSymbol(ParserConstants.T_DNUMBER);
          }
        case 75: break;
        case 64: 
          { return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 76: break;
        case 5: 
          { return createFullSymbol(ParserConstants.T_STRING);
          }
        case 77: break;
        case 29: 
          { return createSymbol(ParserConstants.T_TILDA);
          }
        case 78: break;
        case 21: 
          { return createSymbol(ParserConstants.T_OR);
          }
        case 79: break;
        case 19: 
          { return createSymbol(ParserConstants.T_OPEN_PARENTHESE);
          }
        case 80: break;
        case 16: 
          { return createSymbol(ParserConstants.T_COMMA);
          }
        case 81: break;
        case 39: 
          { popState();
    return createFullSymbol(ParserConstants.T_STRING);
          }
        case 82: break;
        case 40: 
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 83: break;
        case 62: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ParserConstants.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 84: break;
        case 28: 
          { return createSymbol(ParserConstants.T_NOT);
          }
        case 85: break;
        case 56: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ParserConstants.T_OBJECT_OPERATOR);
          }
        case 86: break;
        case 51: 
          { if (yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
    } else {
        return createSymbol(ParserConstants.T_INLINE_HTML);
    }
          }
        case 87: break;
        case 33: 
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 88: break;
        case 63: 
          { yypushback(1);
	return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 89: break;
        case 36: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 90: break;
        case 67: 
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 91: break;
        case 69: 
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 92: break;
        case 71: 
          { handleCommentStart();
          }
        case 93: break;
        case 37: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 94: break;
        case 73: 
          { yybegin(ST_IN_SCRIPTING);
	//return T_OPEN_TAG;
          }
        case 95: break;
        case 74: 
          { handleVarComment();
    //return createFullSymbol(ParserConstants.T_VAR_COMMENT);
          }
        case 96: break;
        case 8: 
          { return createSymbol(ParserConstants.T_DOLLAR);
          }
        case 97: break;
        case 57: 
          { return createSymbol(ParserConstants.T_LOGICAL_OR);
          }
        case 98: break;
        case 25: 
          { return createSymbol(ParserConstants.T_TIMES);
          }
        case 99: break;
        case 9: 
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ParserConstants.T_QUATE);
          }
        case 100: break;
        case 1: 
          { return createSymbol(ParserConstants.T_INLINE_HTML);
          }
        case 101: break;
        case 60: 
          { yypushback(1);
    return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 102: break;
        case 15: 
          { return createSymbol(ParserConstants.T_NEKUDOTAIM);
          }
        case 103: break;
        case 23: 
          { return createSymbol(ParserConstants.T_REFERENCE);
          }
        case 104: break;
        case 13: 
          { return createSymbol(ParserConstants.T_LGREATER);
          }
        case 105: break;
        case 59: 
          { yybegin(YYINITIAL);
    return createSymbol(ParserConstants.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 106: break;
        case 66: 
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 107: break;
        case 49: 
          { //	yymore();
          }
        case 108: break;
        case 4: 
          { return createSymbol(ParserConstants.T_NEKUDA);
          }
        case 109: break;
        case 6: 
          { return createSymbol(ParserConstants.T_PLUS);
          }
        case 110: break;
        case 14: 
          { return createSymbol(ParserConstants.T_SEMICOLON);
          }
        case 111: break;
        case 43: 
          { yypushback(1);
	popState();
	return createSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 112: break;
        case 38: 
          { yypushback(yylength());
    popState();
          }
        case 113: break;
        case 65: 
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 114: break;
        case 68: 
          { return createSymbol(ParserConstants.T_LOGICAL_AND);
          }
        case 115: break;
        case 32: 
          { return createSymbol(ParserConstants.T_AT);
          }
        case 116: break;
        case 17: 
          { return createSymbol(ParserConstants.T_OPEN_RECT);
          }
        case 117: break;
        case 55: 
          { return createSymbol(ParserConstants.T_AS);
          }
        case 118: break;
        case 48: 
          { return createSymbol(ParserConstants.T_CURLY_CLOSE);
          }
        case 119: break;
        case 3: 
          { return createFullSymbol(ParserConstants.T_LNUMBER);
          }
        case 120: break;
        case 30: 
          { return createSymbol(ParserConstants.T_RGREATER);
          }
        case 121: break;
        case 41: 
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ParserConstants.T_STRING_VARNAME);
          }
        case 122: break;
        case 42: 
          { /* Offset could be treated as a long */
	return createFullSymbol(ParserConstants.T_NUM_STRING);
          }
        case 123: break;
        case 54: 
          { return createFullSymbol(ParserConstants.T_CONSTANT_ENCAPSED_STRING);
          }
        case 124: break;
        case 47: 
          { popState();
	return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 125: break;
        case 22: 
          { return createSymbol(ParserConstants.T_KOVA);
          }
        case 126: break;
        case 50: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 127: break;
        case 24: 
          { return createSymbol(ParserConstants.T_DIV);
          }
        case 128: break;
        case 44: 
          { return createSymbol(ParserConstants.T_QUATE);
          }
        case 129: break;
        case 20: 
          { return createSymbol(ParserConstants.T_CLOSE_PARENTHESE);
          }
        case 130: break;
        case 35: 
          { return createFullSymbol(ParserConstants.T_ENCAPSED_AND_WHITESPACE);
          }
        case 131: break;
        case 12: 
          { return createSymbol(ParserConstants.T_MINUS);
          }
        case 132: break;
        case 53: 
          { return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 133: break;
        case 26: 
          { return createSymbol(ParserConstants.T_EQUAL);
          }
        case 134: break;
        case 34: 
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 135: break;
        case 10: 
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 136: break;
        case 46: 
          { return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 137: break;
        case 61: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ParserConstants.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 138: break;
        case 72: 
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 139: break;
        case 2: 
          { // do nothing
          }
        case 140: break;
        case 11: 
          { pushState(ST_IN_SCRIPTING);
    return createSymbol(ParserConstants.T_CURLY_OPEN);
          }
        case 141: break;
        case 18: 
          { return createSymbol(ParserConstants.T_CLOSE_RECT);
          }
        case 142: break;
        case 58: 
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 143: break;
        case 31: 
          { return createSymbol(ParserConstants.T_QUESTION_MARK);
          }
        case 144: break;
        case 45: 
          { return createSymbol(ParserConstants.T_BACKQUATE);
          }
        case 145: break;
        case 70: 
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ParserConstants.T_VARIABLE);
          }
        case 146: break;
        case 7: 
          { 
          }
        case 147: break;
        case 27: 
          { return createSymbol(ParserConstants.T_PRECENT);
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return createSymbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java TwigAstLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        TwigAstLexer scanner = null;
        try {
          scanner = new TwigAstLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
