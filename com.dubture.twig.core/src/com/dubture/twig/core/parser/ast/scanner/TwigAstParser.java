
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 29 18:28:02 CET 2011
//----------------------------------------------------

package com.dubture.twig.core.parser.ast.scanner;

import java.util.*;
import org.eclipse.php.internal.core.ast.nodes.*;
import org.eclipse.dltk.ast.Modifiers;

/** CUP v0.10k generated parser.
  * @version Thu Dec 29 18:28:02 CET 2011
  */
public class TwigAstParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TwigAstParser() {super();}

  /** Constructor which sets the default scanner. */
  public TwigAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\005\000\002\004\003\000\002\007\004" +
    "\000\002\007\002\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\006\000\002\010\005\000\002" +
    "\010\007\000\002\010\006\000\002\010\005\000\002\010" +
    "\004\000\002\006\005\000\002\006\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\004\000\002\005\006\000" +
    "\002\012\004\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\006\000\002\011" +
    "\003\000\002\011\004\000\002\014\005\000\002\014\011" +
    "\000\002\014\014\000\002\014\007\000\002\014\011\000" +
    "\002\014\013\000\002\014\007\000\002\014\004\000\002" +
    "\014\005\000\002\014\004\000\002\014\005\000\002\014" +
    "\004\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\014\004\000\002\014\005\000\002\014\007\000\002" +
    "\014\012\000\002\014\012\000\002\014\007\000\002\014" +
    "\003\000\002\014\017\000\002\014\005\000\002\014\005" +
    "\000\002\014\003\000\002\014\004\000\002\133\003\000" +
    "\002\133\002\000\002\134\003\000\002\134\004\000\002" +
    "\135\012\000\002\015\003\000\002\015\005\000\002\016" +
    "\003\000\002\017\003\000\002\017\005\000\002\130\003" +
    "\000\002\131\003\000\002\052\002\000\002\052\003\000" +
    "\002\136\013\000\002\137\011\000\002\137\010\000\002" +
    "\140\003\000\002\140\004\000\002\140\004\000\002\141" +
    "\002\000\002\141\004\000\002\113\003\000\002\114\002" +
    "\000\002\114\004\000\002\142\002\000\002\142\004\000" +
    "\002\143\003\000\002\143\005\000\002\020\002\000\002" +
    "\020\004\000\002\021\003\000\002\021\004\000\002\022" +
    "\003\000\002\022\005\000\002\023\003\000\002\023\005" +
    "\000\002\024\003\000\002\024\005\000\002\025\005\000" +
    "\002\025\007\000\002\026\005\000\002\026\006\000\002" +
    "\026\005\000\002\026\006\000\002\027\002\000\002\027" +
    "\007\000\002\027\006\000\002\030\003\000\002\030\003" +
    "\000\002\031\003\000\002\031\005\000\002\032\002\000" +
    "\002\032\010\000\002\033\002\000\002\033\011\000\002" +
    "\034\002\000\002\034\004\000\002\035\002\000\002\035" +
    "\005\000\002\036\003\000\002\036\002\000\002\041\003" +
    "\000\002\041\005\000\002\042\004\000\002\042\005\000" +
    "\002\042\006\000\002\042\007\000\002\144\002\000\002" +
    "\144\003\000\002\144\003\000\002\043\003\000\002\043" +
    "\002\000\002\044\003\000\002\044\003\000\002\044\004" +
    "\000\002\044\005\000\002\044\005\000\002\044\006\000" +
    "\002\045\005\000\002\045\003\000\002\046\003\000\002" +
    "\046\004\000\002\046\006\000\002\047\005\000\002\047" +
    "\007\000\002\047\003\000\002\047\005\000\002\050\004" +
    "\000\002\050\002\000\002\051\005\000\002\051\004\000" +
    "\002\051\012\000\002\051\004\000\002\123\003\000\002" +
    "\123\005\000\002\146\003\000\002\146\003\000\002\122" +
    "\002\000\002\122\003\000\002\124\003\000\002\124\004" +
    "\000\002\125\003\000\002\125\003\000\002\125\003\000" +
    "\002\125\003\000\002\125\003\000\002\125\003\000\002" +
    "\120\005\000\002\120\007\000\002\120\003\000\002\120" +
    "\005\000\002\121\007\000\002\121\006\000\002\053\005" +
    "\000\002\053\003\000\002\054\002\000\002\054\003\000" +
    "\002\055\005\000\002\055\003\000\002\056\010\000\002" +
    "\056\005\000\002\056\006\000\002\056\010\000\002\056" +
    "\005\000\002\056\004\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
    "\004\000\002\056\004\000\002\056\004\000\002\056\004" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\004\000\002\056\004\000\002\056\004\000\002" +
    "\056\004\000\002\056\005\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\056\005\000\002\056\005" +
    "\000\002\056\005\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\007\000\002\056\006\000\002" +
    "\056\003\000\002\056\004\000\002\056\004\000\002\056" +
    "\004\000\002\056\004\000\002\056\004\000\002\056\004" +
    "\000\002\056\004\000\002\056\004\000\002\056\004\000" +
    "\002\056\003\000\002\056\006\000\002\056\005\000\002" +
    "\056\004\000\002\056\013\000\002\037\002\000\002\037" +
    "\006\000\002\040\005\000\002\040\006\000\002\040\003" +
    "\000\002\040\004\000\002\057\006\000\002\057\010\000" +
    "\002\057\007\000\002\057\010\000\002\057\010\000\002" +
    "\057\010\000\002\057\010\000\002\057\006\000\002\116" +
    "\003\000\002\116\003\000\002\116\005\000\002\116\004" +
    "\000\002\117\003\000\002\117\005\000\002\117\004\000" +
    "\002\155\003\000\002\155\003\000\002\157\006\000\002" +
    "\157\003\000\002\161\004\000\002\161\002\000\002\162" +
    "\004\000\002\060\002\000\002\060\004\000\002\060\005" +
    "\000\002\106\002\000\002\106\003\000\002\106\003\000" +
    "\002\061\002\000\002\061\005\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\005\000\002\063\004\000\002" +
    "\063\004\000\002\063\004\000\002\063\006\000\002\063" +
    "\003\000\002\163\005\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\005\000\002\064\004\000" +
    "\002\064\003\000\002\064\005\000\002\065\002\000\002" +
    "\065\004\000\002\066\002\000\002\066\003\000\002\067" +
    "\007\000\002\067\005\000\002\067\005\000\002\067\003" +
    "\000\002\070\003\000\002\070\003\000\002\145\003\000" +
    "\002\115\003\000\002\147\003\000\002\132\007\000\002" +
    "\132\003\000\002\127\004\000\002\127\002\000\002\151" +
    "\005\000\002\126\005\000\002\126\002\000\002\150\003" +
    "\000\002\150\004\000\002\152\005\000\002\152\005\000" +
    "\002\072\003\000\002\164\003\000\002\164\003\000\002" +
    "\160\003\000\002\160\004\000\002\160\003\000\002\071" +
    "\006\000\002\071\006\000\002\071\003\000\002\073\003" +
    "\000\002\073\006\000\002\074\002\000\002\074\003\000" +
    "\002\075\003\000\002\075\003\000\002\076\006\000\002" +
    "\076\006\000\002\076\003\000\002\077\003\000\002\077" +
    "\005\000\002\100\003\000\002\100\004\000\002\101\005" +
    "\000\002\101\003\000\002\102\003\000\002\102\006\000" +
    "\002\102\002\000\002\103\002\000\002\103\004\000\002" +
    "\104\007\000\002\104\005\000\002\104\005\000\002\104" +
    "\003\000\002\104\010\000\002\104\006\000\002\104\006" +
    "\000\002\104\004\000\002\105\004\000\002\105\004\000" +
    "\002\105\003\000\002\105\004\000\002\107\003\000\002" +
    "\107\006\000\002\107\005\000\002\107\005\000\002\107" +
    "\010\000\002\107\005\000\002\110\003\000\002\110\003" +
    "\000\002\110\003\000\002\111\006\000\002\111\006\000" +
    "\002\111\004\000\002\111\004\000\002\111\006\000\002" +
    "\111\004\000\002\111\004\000\002\153\003\000\002\153" +
    "\005\000\002\156\005\000\002\156\005\000\002\154\003" +
    "\000\002\112\003\000\002\112\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u032d\000\002\001\ufffb\000\004\002\u032f\001\002\000" +
    "\234\003\121\004\146\005\160\006\111\007\011\010\033" +
    "\011\052\012\061\014\076\016\131\017\125\020\122\021" +
    "\043\023\032\025\104\027\161\032\106\034\133\040\054" +
    "\041\124\042\070\043\112\044\140\045\141\046\037\050" +
    "\156\051\025\052\012\054\100\055\152\056\030\057\056" +
    "\060\031\061\145\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\077\064\102\101\103\132\104\040" +
    "\105\066\106\022\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\137\010\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\041" +
    "\210\062\211\017\215\153\220\103\221\115\222\057\001" +
    "\001\000\002\001\ufee1\000\004\215\u032c\001\002\000\002" +
    "\001\uffcb\000\002\001\ufee4\000\006\012\u0321\220\u0322\001" +
    "\002\000\004\215\u030c\001\002\000\144\004\146\006\111" +
    "\007\011\010\200\011\052\012\061\016\131\032\106\043" +
    "\242\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\102\240\103\132\104\040\105" +
    "\066\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\177\215\153\220\103\221" +
    "\115\222\057\001\002\000\002\001\uff0e\000\070\031\u010c" +
    "\116\u0104\117\u0114\120\376\136\u0101\137\u030a\140\375\141" +
    "\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373" +
    "\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156" +
    "\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100" +
    "\001\002\000\004\060\u0309\001\002\000\002\001\ufedf\000" +
    "\002\001\ufeae\000\220\003\121\004\146\005\160\006\111" +
    "\007\011\010\200\011\052\012\061\014\076\016\131\017" +
    "\125\020\122\021\043\023\032\025\104\027\161\032\106" +
    "\034\133\040\054\041\124\042\070\043\242\045\141\046" +
    "\037\050\156\051\236\052\012\054\100\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\077\064\102\240\103\132\104\040\105\066\106\022" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\137\010\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\041\215\153\220\103" +
    "\221\115\222\057\001\002\000\002\001\uffba\000\036\122" +
    "\u0170\123\u0174\124\u0171\125\u017a\126\u0173\127\u0179\130\u0176" +
    "\131\u0178\132\u0172\133\u016f\134\u0175\135\u0177\167\ufebf\170" +
    "\ufebf\001\ufec1\000\014\010\200\016\u0193\105\u02fe\107\055" +
    "\215\u0191\001\002\000\144\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\002\000\144\004\146\006\111\007\011\010\200\011" +
    "\052\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\002" +
    "\000\004\215\u02f7\001\002\000\002\001\uffb4\000\004\215" +
    "\u02e7\001\002\000\004\217\u02e6\001\uffff\000\144\004\146" +
    "\006\111\007\011\010\200\011\052\012\061\016\131\032" +
    "\106\043\242\055\152\056\030\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\102\240\103\132\104" +
    "\040\105\066\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\177\215\153\220" +
    "\103\221\115\222\057\001\002\000\002\001\ufeb2\000\144" +
    "\004\146\006\111\007\011\010\200\011\052\012\061\016" +
    "\131\032\106\043\242\055\152\056\030\066\154\067\013" +
    "\070\020\071\044\072\046\073\135\074\006\102\240\103" +
    "\132\104\040\105\066\107\055\110\027\111\071\112\047" +
    "\113\127\114\110\121\063\157\107\160\067\164\150\165" +
    "\014\167\051\170\155\171\026\172\136\173\036\174\130" +
    "\175\074\176\137\177\073\200\034\203\077\207\177\215" +
    "\153\220\103\221\115\222\057\001\002\000\004\077\u02cd" +
    "\001\002\000\002\001\ufee0\000\004\012\u02c4\001\ufefb\000" +
    "\002\001\ufeb1\000\004\215\u02bc\001\002\000\002\001\ufede" +
    "\000\004\010\u02b2\001\002\000\002\001\ufedd\000\004\215" +
    "\u02af\001\002\000\004\064\u02a4\001\ufebd\000\020\010\200" +
    "\012\061\102\350\105\345\107\055\207\177\220\103\001" +
    "\002\000\002\001\ufed2\000\012\077\367\101\ufeb3\201\370" +
    "\215\ufeb7\001\ufeb0\000\146\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\137" +
    "\u02a0\157\107\160\067\164\150\165\014\167\051\170\155" +
    "\171\026\172\136\173\036\174\130\175\074\176\137\177" +
    "\073\200\034\203\077\207\177\215\153\220\103\221\115" +
    "\222\057\001\002\000\002\001\ufffd\000\004\215\u029d\001" +
    "\002\000\012\012\061\015\u029b\075\u023f\076\u023e\001\ufeea" +
    "\000\004\101\u0297\001\002\000\002\001\ufe76\000\004\060" +
    "\u0296\001\002\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\002\001\uffea\000\002\001\uff18\000\006\010\200" +
    "\107\055\001\002\000\144\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\002\000\004\010\u028f\001\002\000\144\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\002\000\006\012\061\220\u012a\001" +
    "\002\000\144\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\157\107\160\067" +
    "\164\150\165\014\167\051\170\155\171\026\172\136\173" +
    "\036\174\130\175\074\176\137\177\073\200\034\203\077" +
    "\207\177\215\153\220\103\221\115\222\057\001\002\000" +
    "\144\004\146\006\111\007\011\010\200\011\052\012\061" +
    "\016\131\032\106\043\242\055\152\056\030\066\154\067" +
    "\013\070\020\071\044\072\046\073\135\074\006\102\240" +
    "\103\132\104\040\105\066\107\055\110\027\111\071\112" +
    "\047\113\127\114\110\121\063\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\002\000\002\001" +
    "\ufed1\000\002\001\uffd2\000\020\010\200\012\061\102\u0125" +
    "\105\u011f\107\055\207\177\220\103\001\002\000\004\215" +
    "\u0281\001\002\000\012\010\200\077\u0279\105\326\107\055" +
    "\001\002\000\006\167\u0277\170\u0278\001\002\000\004\077" +
    "\u012b\001\ufe9f\000\004\215\u0261\001\002\000\002\001\ufff9" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\002\000\144" +
    "\004\146\006\111\007\011\010\200\011\052\012\061\016" +
    "\131\032\106\043\242\055\152\056\030\066\154\067\013" +
    "\070\020\071\044\072\046\073\135\074\006\102\240\103" +
    "\132\104\040\105\066\107\055\110\027\111\071\112\047" +
    "\113\127\114\110\121\063\157\107\160\067\164\150\165" +
    "\014\167\051\170\155\171\026\172\136\173\036\174\130" +
    "\175\074\176\137\177\073\200\034\203\077\207\177\215" +
    "\153\220\103\221\115\222\057\001\002\000\144\004\146" +
    "\006\111\007\011\010\200\011\052\012\061\016\131\032" +
    "\106\043\242\055\152\056\030\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\102\240\103\132\104" +
    "\040\105\066\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\177\215\153\220" +
    "\103\221\115\222\057\001\002\000\002\001\ufee5\000\004" +
    "\144\244\001\uffb9\000\002\001\ufecd\000\002\001\uffe5\000" +
    "\012\012\061\015\u0240\075\u023f\076\u023e\001\002\000\002" +
    "\001\ufeaa\000\004\010\u020c\001\002\000\006\115\u0207\137" +
    "\u0208\001\002\000\002\001\uffc7\000\220\003\121\004\146" +
    "\005\160\006\111\007\011\010\033\011\052\012\061\014" +
    "\076\016\131\017\125\020\122\021\043\023\032\025\104" +
    "\027\161\032\106\034\133\040\054\041\124\042\070\043" +
    "\242\045\141\046\037\050\156\051\236\052\012\054\100" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\077\064\102\240\103\132\104\040" +
    "\105\066\106\022\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\137\010\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\041" +
    "\215\153\220\103\221\115\222\057\001\002\000\002\001" +
    "\ufeab\000\146\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\137\u01fe\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\144\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\157\107\160\067" +
    "\164\150\165\014\167\051\170\155\171\026\172\136\173" +
    "\036\174\130\175\074\176\137\177\073\200\034\203\077" +
    "\207\177\215\153\220\103\221\115\222\057\001\002\000" +
    "\002\001\ufff8\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\144\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\157\107\160\067" +
    "\164\150\165\014\167\051\170\155\171\026\172\136\173" +
    "\036\174\130\175\074\176\137\177\073\200\034\203\077" +
    "\207\177\215\153\220\103\221\115\222\057\001\002\000" +
    "\002\001\ufee3\000\002\001\ufedc\000\004\215\u01de\001\002" +
    "\000\002\001\uffbb\000\002\001\ufee2\000\144\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\002\000\144\004\146\006\111\007" +
    "\011\010\200\011\052\012\061\016\131\032\106\043\242" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\102\240\103\132\104\040\105\066" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\157\107\160\067\164\150\165\014\167\051\170\155" +
    "\171\026\172\136\173\036\174\130\175\074\176\137\177" +
    "\073\200\034\203\077\207\177\215\153\220\103\221\115" +
    "\222\057\001\002\000\004\010\u01d9\001\002\000\146\004" +
    "\146\006\111\007\011\010\200\011\052\012\061\016\131" +
    "\032\106\043\242\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\102\240\103\132" +
    "\104\040\105\066\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\137\u01d4\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\002\000\002\001" +
    "\ufec2\000\004\101\u01d2\001\002\000\002\001\ufec3\000\002" +
    "\001\uffaf\000\004\215\u01cd\001\ufeed\000\010\101\ufefa\105" +
    "\204\215\352\001\ufed0\000\144\004\146\006\111\007\011" +
    "\010\200\011\052\012\061\016\131\032\106\043\242\055" +
    "\152\056\030\066\154\067\013\070\020\071\044\072\046" +
    "\073\135\074\006\102\240\103\132\104\040\105\066\107" +
    "\055\110\027\111\071\112\047\113\127\114\110\121\063" +
    "\157\107\160\067\164\150\165\014\167\051\170\155\171" +
    "\026\172\136\173\036\174\130\175\074\176\137\177\073" +
    "\200\034\203\077\207\177\215\153\220\103\221\115\222" +
    "\057\001\002\000\002\001\ufffa\000\004\215\u01c6\001\002" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\002\000\004" +
    "\215\u01b7\001\002\000\020\010\200\012\061\102\350\105" +
    "\345\107\055\207\177\220\103\001\002\000\144\004\146" +
    "\006\111\007\011\010\200\011\052\012\061\016\131\032" +
    "\106\043\242\055\152\056\030\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\102\240\103\132\104" +
    "\040\105\066\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\177\215\153\220" +
    "\103\221\115\222\057\001\002\000\002\001\ufffc\000\004" +
    "\215\u0197\001\002\000\004\215\162\001\002\000\006\010" +
    "\166\107\164\001\002\000\006\115\232\216\231\001\002" +
    "\000\002\001\ufe74\000\004\122\167\001\002\000\002\001" +
    "\ufe75\000\046\006\111\007\011\010\200\016\131\067\174" +
    "\070\020\071\044\072\046\073\135\074\006\102\202\103" +
    "\132\104\040\105\173\107\055\157\201\160\171\207\177" +
    "\001\002\000\002\001\ufedb\000\046\006\111\007\011\010" +
    "\200\016\131\067\174\070\020\071\044\072\046\073\135" +
    "\074\006\102\202\103\132\104\040\105\173\107\055\157" +
    "\201\160\171\207\177\001\002\000\002\001\ufed4\000\006" +
    "\010\200\107\055\001\002\000\004\215\213\001\002\000" +
    "\004\101\211\001\002\000\002\001\uff9e\000\002\001\ufefb" +
    "\000\002\001\uffff\000\046\006\111\007\011\010\200\016" +
    "\131\067\174\070\020\071\044\072\046\073\135\074\006" +
    "\102\202\103\132\104\040\105\173\107\055\157\201\160" +
    "\171\207\177\001\002\000\004\105\206\001\002\000\006" +
    "\101\ufefa\105\204\001\ufeda\000\004\010\205\001\002\000" +
    "\002\001\ufffe\000\006\010\200\107\055\001\002\000\006" +
    "\101\ufef9\105\204\001\ufed9\000\002\001\ufed7\000\004\010" +
    "\212\001\002\000\002\001\ufed3\000\046\006\111\007\011" +
    "\010\200\016\131\067\174\070\020\071\044\072\046\073" +
    "\135\074\006\102\202\103\132\104\040\105\173\107\055" +
    "\157\201\160\171\207\177\001\ufecb\000\004\216\226\001" +
    "\002\000\004\115\221\001\ufec9\000\004\065\217\001\ufec4" +
    "\000\046\006\111\007\011\010\200\016\131\067\174\070" +
    "\020\071\044\072\046\073\135\074\006\102\202\103\132" +
    "\104\040\105\173\107\055\157\201\160\171\207\177\001" +
    "\002\000\002\001\ufec5\000\046\006\111\007\011\010\200" +
    "\016\131\067\174\070\020\071\044\072\046\073\135\074" +
    "\006\102\202\103\132\104\040\105\173\107\055\157\201" +
    "\160\171\207\177\001\ufec8\000\002\001\ufeca\000\004\065" +
    "\224\001\ufec6\000\046\006\111\007\011\010\200\016\131" +
    "\067\174\070\020\071\044\072\046\073\135\074\006\102" +
    "\202\103\132\104\040\105\173\107\055\157\201\160\171" +
    "\207\177\001\002\000\002\001\ufec7\000\002\001\ufed5\000" +
    "\006\101\ufef8\105\204\001\ufed8\000\002\001\ufed6\000\222" +
    "\003\121\004\146\005\160\006\111\007\011\010\033\011" +
    "\052\012\061\014\076\016\131\017\125\020\122\021\043" +
    "\023\032\025\104\027\161\032\106\034\133\040\054\041" +
    "\124\042\070\043\242\045\141\046\037\050\156\051\236" +
    "\052\012\054\100\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\077\064\102\240" +
    "\103\132\104\040\105\066\106\022\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\137\010\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\041\215\153\217\241\220\103\221\115\222" +
    "\057\001\002\000\006\010\166\107\164\001\002\000\004" +
    "\122\234\001\002\000\046\006\111\007\011\010\200\016" +
    "\131\067\174\070\020\071\044\072\046\073\135\074\006" +
    "\102\202\103\132\104\040\105\173\107\055\157\201\160" +
    "\171\207\177\001\002\000\002\001\uff9d\000\006\016\u0193" +
    "\215\u0191\001\002\000\002\001\uffcc\000\004\105\326\001" +
    "\002\000\002\001\uffea\000\004\144\244\001\uffb9\000\002" +
    "\001\uffa0\000\002\001\uffb8\000\004\215\246\001\002\000" +
    "\016\010\200\067\247\102\253\105\256\107\055\216\uff88" +
    "\001\uff81\000\002\001\uff7f\000\004\105\204\001\ufef7\000" +
    "\006\012\316\144\315\001\002\000\004\115\313\001\uff89" +
    "\000\004\105\311\001\002\000\002\001\uff80\000\002\001" +
    "\uff87\000\006\010\200\107\055\001\002\000\004\216\260" +
    "\001\002\000\004\051\261\001\uff09\000\004\215\276\001" +
    "\002\000\004\077\263\001\002\000\002\001\uffea\000\234" +
    "\003\121\004\146\005\160\006\111\007\011\010\033\011" +
    "\052\012\061\014\076\016\131\017\125\020\122\021\043" +
    "\023\032\025\104\027\161\032\106\034\133\040\054\041" +
    "\124\042\070\043\112\045\141\046\037\050\156\051\236" +
    "\052\012\054\100\055\152\056\030\057\266\060\031\061" +
    "\145\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\077\064\100\270\102\240\103\132\104\040\105" +
    "\066\106\022\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\137\010\157\107\160\067\164\150\165" +
    "\014\167\051\170\155\171\026\172\136\173\036\174\130" +
    "\175\074\176\137\177\073\200\034\203\077\207\041\210" +
    "\062\211\017\215\153\220\103\221\115\222\057\001\002" +
    "\000\002\001\uffeb\000\004\215\273\001\002\000\002\001" +
    "\uffe8\000\002\001\uff0a\000\002\001\uffe7\000\002\001\uffe9" +
    "\000\004\216\274\001\002\000\004\137\275\001\002\000" +
    "\002\001\uffe6\000\006\012\301\144\277\001\002\000\004" +
    "\012\307\001\002\000\006\115\303\216\302\001\002\000" +
    "\002\001\uff05\000\002\001\uff08\000\006\012\305\144\304" +
    "\001\002\000\004\012\306\001\002\000\002\001\uff07\000" +
    "\002\001\uff06\000\002\001\uff04\000\004\105\204\001\ufef5" +
    "\000\006\010\200\107\055\001\002\000\004\105\204\001" +
    "\ufef6\000\014\010\200\067\247\102\253\105\256\107\055" +
    "\001\uff81\000\002\001\uff86\000\004\012\321\001\002\000" +
    "\004\122\317\001\uff85\000\046\006\111\007\011\010\200" +
    "\016\131\067\174\070\020\071\044\072\046\073\135\074" +
    "\006\102\202\103\132\104\040\105\173\107\055\157\201" +
    "\160\171\207\177\001\002\000\002\001\uff83\000\004\122" +
    "\322\001\uff84\000\046\006\111\007\011\010\200\016\131" +
    "\067\174\070\020\071\044\072\046\073\135\074\006\102" +
    "\202\103\132\104\040\105\173\107\055\157\201\160\171" +
    "\207\177\001\002\000\002\001\uff82\000\234\003\121\004" +
    "\146\005\160\006\111\007\011\010\033\011\052\012\061" +
    "\014\076\016\131\017\125\020\122\021\043\023\032\025" +
    "\104\027\161\030\325\032\106\034\133\040\054\041\124" +
    "\042\070\043\112\045\141\046\037\050\156\051\236\052" +
    "\012\054\100\055\152\056\030\057\266\060\031\061\145" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\077\064\102\240\103\132\104\040\105\066\106\022" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\137\010\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\041\210\062\211\017" +
    "\215\153\220\103\221\115\222\057\001\002\000\002\001" +
    "\uff9f\000\006\010\200\107\055\001\002\000\010\101\ufef9" +
    "\105\204\215\330\001\ufecf\000\146\004\146\006\111\007" +
    "\011\010\200\011\052\012\061\016\131\032\106\043\242" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\102\240\103\132\104\040\105\066" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\144\332\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\uff7d\000\004\216\u0190\001\002\000" +
    "\020\010\200\012\061\102\350\105\345\107\055\207\177" +
    "\220\103\001\002\000\066\031\u010c\116\u0104\117\u0114\120" +
    "\376\136\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d" +
    "\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153" +
    "\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a" +
    "\162\u0109\163\374\166\u0100\001\002\000\042\115\uff7b\122" +
    "\u0170\123\u0174\124\u0171\125\u017a\126\u0173\127\u0179\130\u0176" +
    "\131\u0178\132\u0172\133\u016f\134\u0175\135\u0177\167\ufebf\170" +
    "\ufebf\216\uff7b\001\ufec1\000\004\115\337\001\uff7e\000\006" +
    "\115\uff7c\216\uff7c\001\ufec2\000\146\004\146\006\111\007" +
    "\011\010\200\011\052\012\061\016\131\032\106\043\242" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\102\240\103\132\104\040\105\066" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\144\341\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\002\000\042\115\uff78\122\u0170\123" +
    "\u0174\124\u0171\125\u017a\126\u0173\127\u0179\130\u0176\131\u0178" +
    "\132\u0172\133\u016f\134\u0175\135\u0177\167\ufebf\170\ufebf\216" +
    "\uff78\001\ufec1\000\020\010\200\012\061\102\350\105\345" +
    "\107\055\207\177\220\103\001\002\000\006\115\uff79\216" +
    "\uff79\001\ufec2\000\002\001\uff77\000\004\101\u0166\001\002" +
    "\000\006\010\200\107\055\001\002\000\002\001\ufec0\000" +
    "\004\101\357\001\002\000\004\105\355\001\002\000\006" +
    "\105\204\215\352\001\ufefa\000\146\004\146\006\111\007" +
    "\011\010\200\011\052\012\061\016\131\032\106\043\242" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\102\240\103\132\104\040\105\066" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\144\332\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\uff7d\000\004\216\354\001\002\000" +
    "\002\001\uff03\000\006\010\200\107\055\001\002\000\006" +
    "\105\204\215\330\001\ufef9\000\010\010\363\012\061\220" +
    "\103\001\002\000\004\215\u015f\001\ufeb5\000\006\012\061" +
    "\220\u012a\001\002\000\006\077\367\201\370\001\ufeb7\000" +
    "\004\215\364\001\002\000\146\004\146\006\111\007\011" +
    "\010\200\011\052\012\061\016\131\032\106\043\242\055" +
    "\152\056\030\066\154\067\013\070\020\071\044\072\046" +
    "\073\135\074\006\102\240\103\132\104\040\105\066\107" +
    "\055\110\027\111\071\112\047\113\127\114\110\121\063" +
    "\144\332\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\177\215\153\220\103\221" +
    "\115\222\057\001\uff7d\000\004\216\366\001\002\000\002" +
    "\001\uff00\000\144\004\146\006\111\007\011\010\200\011" +
    "\052\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\002" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\ufea8\000\004" +
    "\202\u015b\001\002\000\066\031\u010c\116\u0104\117\u0114\120" +
    "\376\136\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d" +
    "\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153" +
    "\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a" +
    "\162\u0109\163\374\166\u0100\001\ufea7\000\144\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\002\000\144\004\146\006\111\007" +
    "\011\010\200\011\052\012\061\016\131\032\106\043\242" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\102\240\103\132\104\040\105\066" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\157\107\160\067\164\150\165\014\167\051\170\155" +
    "\171\026\172\136\173\036\174\130\175\074\176\137\177" +
    "\073\200\034\203\077\207\177\215\153\220\103\221\115" +
    "\222\057\001\002\000\144\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\002\000\144\004\146\006\111\007\011\010\200\011" +
    "\052\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\002" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\002\000\144" +
    "\004\146\006\111\007\011\010\200\011\052\012\061\016" +
    "\131\032\106\043\242\055\152\056\030\066\154\067\013" +
    "\070\020\071\044\072\046\073\135\074\006\102\240\103" +
    "\132\104\040\105\066\107\055\110\027\111\071\112\047" +
    "\113\127\114\110\121\063\157\107\160\067\164\150\165" +
    "\014\167\051\170\155\171\026\172\136\173\036\174\130" +
    "\175\074\176\137\177\073\200\034\203\077\207\177\215" +
    "\153\220\103\221\115\222\057\001\002\000\146\004\146" +
    "\006\111\007\011\010\200\011\052\012\061\016\131\032" +
    "\106\043\242\055\152\056\030\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\102\240\103\132\104" +
    "\040\105\066\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\177\215\153\217" +
    "\u0150\220\103\221\115\222\057\001\002\000\144\004\146" +
    "\006\111\007\011\010\200\011\052\012\061\016\131\032" +
    "\106\043\242\055\152\056\030\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\102\240\103\132\104" +
    "\040\105\066\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\177\215\153\220" +
    "\103\221\115\222\057\001\002\000\144\004\146\006\111" +
    "\007\011\010\200\011\052\012\061\016\131\032\106\043" +
    "\242\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\102\240\103\132\104\040\105" +
    "\066\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\177\215\153\220\103\221" +
    "\115\222\057\001\002\000\144\004\146\006\111\007\011" +
    "\010\200\011\052\012\061\016\131\032\106\043\242\055" +
    "\152\056\030\066\154\067\013\070\020\071\044\072\046" +
    "\073\135\074\006\102\240\103\132\104\040\105\066\107" +
    "\055\110\027\111\071\112\047\113\127\114\110\121\063" +
    "\157\107\160\067\164\150\165\014\167\051\170\155\171" +
    "\026\172\136\173\036\174\130\175\074\176\137\177\073" +
    "\200\034\203\077\207\177\215\153\220\103\221\115\222" +
    "\057\001\002\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\144\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\157\107\160\067" +
    "\164\150\165\014\167\051\170\155\171\026\172\136\173" +
    "\036\174\130\175\074\176\137\177\073\200\034\203\077" +
    "\207\177\215\153\220\103\221\115\222\057\001\002\000" +
    "\144\004\146\006\111\007\011\010\200\011\052\012\061" +
    "\016\131\032\106\043\242\055\152\056\030\066\154\067" +
    "\013\070\020\071\044\072\046\073\135\074\006\102\240" +
    "\103\132\104\040\105\066\107\055\110\027\111\071\112" +
    "\047\113\127\114\110\121\063\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\002\000\144\004" +
    "\146\006\111\007\011\010\200\011\052\012\061\016\131" +
    "\032\106\043\242\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\102\240\103\132" +
    "\104\040\105\066\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\177\215\153" +
    "\220\103\221\115\222\057\001\002\000\144\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\002\000\144\004\146\006\111\007" +
    "\011\010\200\011\052\012\061\016\131\032\106\043\242" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\102\240\103\132\104\040\105\066" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\157\107\160\067\164\150\165\014\167\051\170\155" +
    "\171\026\172\136\173\036\174\130\175\074\176\137\177" +
    "\073\200\034\203\077\207\177\215\153\220\103\221\115" +
    "\222\057\001\002\000\144\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\002\000\020\010\200\012\061\102\u0125\105\u011f\107" +
    "\055\207\177\220\103\001\002\000\144\004\146\006\111" +
    "\007\011\010\200\011\052\012\061\016\131\032\106\043" +
    "\242\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\102\240\103\132\104\040\105" +
    "\066\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\177\215\153\220\103\221" +
    "\115\222\057\001\002\000\144\004\146\006\111\007\011" +
    "\010\200\011\052\012\061\016\131\032\106\043\242\055" +
    "\152\056\030\066\154\067\013\070\020\071\044\072\046" +
    "\073\135\074\006\102\240\103\132\104\040\105\066\107" +
    "\055\110\027\111\071\112\047\113\127\114\110\121\063" +
    "\157\107\160\067\164\150\165\014\167\051\170\155\171" +
    "\026\172\136\173\036\174\130\175\074\176\137\177\073" +
    "\200\034\203\077\207\177\215\153\220\103\221\115\222" +
    "\057\001\002\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\144\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\157\107\160\067" +
    "\164\150\165\014\167\051\170\155\171\026\172\136\173" +
    "\036\174\130\175\074\176\137\177\073\200\034\203\077" +
    "\207\177\215\153\220\103\221\115\222\057\001\002\000" +
    "\144\004\146\006\111\007\011\010\200\011\052\012\061" +
    "\016\131\032\106\043\242\055\152\056\030\066\154\067" +
    "\013\070\020\071\044\072\046\073\135\074\006\102\240" +
    "\103\132\104\040\105\066\107\055\110\027\111\071\112" +
    "\047\113\127\114\110\121\063\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\002\000\144\004" +
    "\146\006\111\007\011\010\200\011\052\012\061\016\131" +
    "\032\106\043\242\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\102\240\103\132" +
    "\104\040\105\066\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\177\215\153" +
    "\220\103\221\115\222\057\001\002\000\144\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\002\000\144\004\146\006\111\007" +
    "\011\010\200\011\052\012\061\016\131\032\106\043\242" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\102\240\103\132\104\040\105\066" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\157\107\160\067\164\150\165\014\167\051\170\155" +
    "\171\026\172\136\173\036\174\130\175\074\176\137\177" +
    "\073\200\034\203\077\207\177\215\153\220\103\221\115" +
    "\222\057\001\002\000\062\031\u010c\120\376\136\u0101\140" +
    "\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108" +
    "\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155" +
    "\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374" +
    "\166\u0100\001\uff34\000\012\031\u010c\161\u010a\162\u0109\163" +
    "\374\001\uff2f\000\034\031\u010c\151\u0111\152\u0110\153\u0102" +
    "\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162" +
    "\u0109\163\374\166\u0100\001\uff22\000\024\031\u010c\155\u010b" +
    "\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166" +
    "\u0100\001\uff1f\000\024\031\u010c\155\u010b\156\u0107\157\u0113" +
    "\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff1d\000" +
    "\024\031\u010c\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a" +
    "\162\u0109\163\374\166\u0100\001\uff1e\000\052\031\u010c\142" +
    "\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105" +
    "\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157" +
    "\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff37" +
    "\000\044\031\u010c\145\u0112\146\u0108\147\373\150\u0105\151" +
    "\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113" +
    "\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff32\000" +
    "\002\001\ufef3\000\004\101\u0144\001\002\000\006\010\200" +
    "\107\055\001\002\000\010\077\367\101\ufeb3\201\370\001" +
    "\ufeb0\000\004\101\u0141\001\ufef4\000\002\001\uff1c\000\004" +
    "\064\u012e\001\ufef1\000\006\012\061\220\u012a\001\002\000" +
    "\004\105\u0127\001\002\000\004\105\204\001\ufefa\000\006" +
    "\010\200\107\055\001\002\000\004\105\204\001\ufef9\000" +
    "\006\077\367\201\370\001\ufeaf\000\004\077\u012b\001\ufe9e" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\002\000\070" +
    "\031\u010c\100\u012d\116\u0104\117\u0114\120\376\136\u0101\140" +
    "\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108" +
    "\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155" +
    "\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374" +
    "\166\u0100\001\002\000\002\001\ufea9\000\014\010\166\012" +
    "\061\077\u0134\107\164\220\103\001\002\000\002\001\ufea1" +
    "\000\002\001\ufea2\000\002\001\ufea5\000\002\001\ufeef\000" +
    "\006\077\u0137\201\u0138\001\ufea6\000\144\004\146\006\111" +
    "\007\011\010\200\011\052\012\061\016\131\032\106\043" +
    "\242\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\102\240\103\132\104\040\105" +
    "\066\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\177\215\153\220\103\221" +
    "\115\222\057\001\002\000\070\031\u010c\100\u0136\116\u0104" +
    "\117\u0114\120\376\136\u0101\140\375\141\u010e\142\377\143" +
    "\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111" +
    "\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160" +
    "\u0103\161\u010a\162\u0109\163\374\166\u0100\001\002\000\002" +
    "\001\ufea0\000\144\004\146\006\111\007\011\010\200\011" +
    "\052\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\002" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\ufea8\000\004" +
    "\202\u013a\001\002\000\002\001\ufea4\000\070\031\u010c\100" +
    "\u013c\116\u0104\117\u0114\120\376\136\u0101\140\375\141\u010e" +
    "\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150" +
    "\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107" +
    "\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001" +
    "\002\000\002\001\ufea3\000\004\064\u013f\001\ufef2\000\002" +
    "\001\ufef0\000\014\010\166\012\061\077\u0134\107\164\220" +
    "\103\001\002\000\002\001\ufeee\000\006\012\061\220\103" +
    "\001\002\000\002\001\ufeb5\000\004\105\204\001\ufef8\000" +
    "\006\012\061\220\103\001\002\000\002\001\ufeb4\000\020" +
    "\031\u010c\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166" +
    "\u0100\001\uff2a\000\004\031\u010c\001\uff2d\000\004\031\u010c" +
    "\001\uff2c\000\034\031\u010c\151\u0111\152\u0110\153\u0102\154" +
    "\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109" +
    "\163\374\166\u0100\001\uff21\000\020\031\u010c\157\u0113\160" +
    "\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff29\000\046" +
    "\031\u010c\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151" +
    "\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113" +
    "\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff31\000" +
    "\034\031\u010c\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b" +
    "\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166" +
    "\u0100\001\uff23\000\064\031\u010c\117\u0114\120\376\136\u0101" +
    "\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146" +
    "\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f" +
    "\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163" +
    "\374\166\u0100\001\uff36\000\012\031\u010c\161\u010a\162\u0109" +
    "\163\374\001\uff2e\000\024\031\u010c\155\u010b\156\u0107\157" +
    "\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff20" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\002\000\070" +
    "\031\u010c\116\u0104\117\u0114\120\376\136\u0101\140\375\141" +
    "\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373" +
    "\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156" +
    "\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100" +
    "\217\u0152\001\002\000\144\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\002\000\066\031\u010c\116\u0104\117\u0114\120\376\136" +
    "\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112" +
    "\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154" +
    "\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109" +
    "\163\374\166\u0100\001\uff1a\000\066\031\u010c\116\u0104\117" +
    "\u0114\120\376\136\u0101\140\375\141\u010e\142\377\143\u0106" +
    "\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152" +
    "\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103" +
    "\161\u010a\162\u0109\163\374\166\u0100\001\uff19\000\012\031" +
    "\u010c\161\u010a\162\u0109\163\374\001\uff30\000\050\031\u010c" +
    "\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151" +
    "\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113" +
    "\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff33\000" +
    "\060\031\u010c\136\u0101\140\375\141\u010e\142\377\143\u0106" +
    "\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152" +
    "\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103" +
    "\161\u010a\162\u0109\163\374\166\u0100\001\uff35\000\054\031" +
    "\u010c\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108" +
    "\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155" +
    "\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374" +
    "\166\u0100\001\uff38\000\004\031\u010c\001\uff2b\000\034\031" +
    "\u010c\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107" +
    "\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001" +
    "\uff24\000\002\001\ufead\000\070\031\u010c\100\u015d\116\u0104" +
    "\117\u0114\120\376\136\u0101\140\375\141\u010e\142\377\143" +
    "\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111" +
    "\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160" +
    "\u0103\161\u010a\162\u0109\163\374\166\u0100\001\002\000\002" +
    "\001\ufeac\000\006\077\367\201\370\001\ufeb6\000\146\004" +
    "\146\006\111\007\011\010\200\011\052\012\061\016\131" +
    "\032\106\043\242\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\102\240\103\132" +
    "\104\040\105\066\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\144\332\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\uff7d\000\004\216" +
    "\u0161\001\002\000\002\001\ufeff\000\006\105\204\215\u0163" +
    "\001\ufef8\000\146\004\146\006\111\007\011\010\200\011" +
    "\052\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\144\332\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\uff7d\000\004\216\u0165\001\002\000\002\001\uff01\000" +
    "\010\010\u0168\012\061\220\103\001\002\000\004\215\u016c" +
    "\001\ufeb4\000\004\215\u0169\001\002\000\146\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\144\332\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\177\215\153" +
    "\220\103\221\115\222\057\001\uff7d\000\004\216\u016b\001" +
    "\002\000\002\001\ufefe\000\146\004\146\006\111\007\011" +
    "\010\200\011\052\012\061\016\131\032\106\043\242\055" +
    "\152\056\030\066\154\067\013\070\020\071\044\072\046" +
    "\073\135\074\006\102\240\103\132\104\040\105\066\107" +
    "\055\110\027\111\071\112\047\113\127\114\110\121\063" +
    "\144\332\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\177\215\153\220\103\221" +
    "\115\222\057\001\uff7d\000\004\216\u016e\001\002\000\002" +
    "\001\ufefd\000\144\004\146\006\111\007\011\010\200\011" +
    "\052\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\002" +
    "\000\146\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\144\u0185\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\002" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\002\000\144" +
    "\004\146\006\111\007\011\010\200\011\052\012\061\016" +
    "\131\032\106\043\242\055\152\056\030\066\154\067\013" +
    "\070\020\071\044\072\046\073\135\074\006\102\240\103" +
    "\132\104\040\105\066\107\055\110\027\111\071\112\047" +
    "\113\127\114\110\121\063\157\107\160\067\164\150\165" +
    "\014\167\051\170\155\171\026\172\136\173\036\174\130" +
    "\175\074\176\137\177\073\200\034\203\077\207\177\215" +
    "\153\220\103\221\115\222\057\001\002\000\144\004\146" +
    "\006\111\007\011\010\200\011\052\012\061\016\131\032" +
    "\106\043\242\055\152\056\030\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\102\240\103\132\104" +
    "\040\105\066\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\177\215\153\220" +
    "\103\221\115\222\057\001\002\000\144\004\146\006\111" +
    "\007\011\010\200\011\052\012\061\016\131\032\106\043" +
    "\242\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\102\240\103\132\104\040\105" +
    "\066\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\177\215\153\220\103\221" +
    "\115\222\057\001\002\000\144\004\146\006\111\007\011" +
    "\010\200\011\052\012\061\016\131\032\106\043\242\055" +
    "\152\056\030\066\154\067\013\070\020\071\044\072\046" +
    "\073\135\074\006\102\240\103\132\104\040\105\066\107" +
    "\055\110\027\111\071\112\047\113\127\114\110\121\063" +
    "\157\107\160\067\164\150\165\014\167\051\170\155\171" +
    "\026\172\136\173\036\174\130\175\074\176\137\177\073" +
    "\200\034\203\077\207\177\215\153\220\103\221\115\222" +
    "\057\001\002\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\144\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\157\107\160\067" +
    "\164\150\165\014\167\051\170\155\171\026\172\136\173" +
    "\036\174\130\175\074\176\137\177\073\200\034\203\077" +
    "\207\177\215\153\220\103\221\115\222\057\001\002\000" +
    "\144\004\146\006\111\007\011\010\200\011\052\012\061" +
    "\016\131\032\106\043\242\055\152\056\030\066\154\067" +
    "\013\070\020\071\044\072\046\073\135\074\006\102\240" +
    "\103\132\104\040\105\066\107\055\110\027\111\071\112" +
    "\047\113\127\114\110\121\063\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\002\000\144\004" +
    "\146\006\111\007\011\010\200\011\052\012\061\016\131" +
    "\032\106\043\242\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\102\240\103\132" +
    "\104\040\105\066\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\177\215\153" +
    "\220\103\221\115\222\057\001\002\000\144\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\002\000\060\031\u010c\136\u0101\140" +
    "\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108" +
    "\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155" +
    "\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374" +
    "\166\u0100\001\uff45\000\060\031\u010c\136\u0101\140\375\141" +
    "\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373" +
    "\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156" +
    "\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100" +
    "\001\uff43\000\060\031\u010c\136\u0101\140\375\141\u010e\142" +
    "\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105" +
    "\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157" +
    "\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff41" +
    "\000\060\031\u010c\136\u0101\140\375\141\u010e\142\377\143" +
    "\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111" +
    "\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160" +
    "\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff3d\000\060" +
    "\031\u010c\136\u0101\140\375\141\u010e\142\377\143\u0106\144" +
    "\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152\u0110" +
    "\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161" +
    "\u010a\162\u0109\163\374\166\u0100\001\uff42\000\060\031\u010c" +
    "\136\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d\145" +
    "\u0112\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102" +
    "\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162" +
    "\u0109\163\374\166\u0100\001\uff3e\000\060\031\u010c\136\u0101" +
    "\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146" +
    "\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f" +
    "\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163" +
    "\374\166\u0100\001\uff47\000\060\031\u010c\136\u0101\140\375" +
    "\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147" +
    "\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b" +
    "\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166" +
    "\u0100\001\uff44\000\060\031\u010c\136\u0101\140\375\141\u010e" +
    "\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150" +
    "\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107" +
    "\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001" +
    "\uff40\000\060\031\u010c\136\u0101\140\375\141\u010e\142\377" +
    "\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151" +
    "\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113" +
    "\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff46\000" +
    "\022\010\200\012\061\102\350\105\345\107\055\203\u0188" +
    "\207\177\220\103\001\002\000\060\031\u010c\136\u0101\140" +
    "\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108" +
    "\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155" +
    "\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374" +
    "\166\u0100\001\uff4c\000\002\001\uff4b\000\020\010\200\012" +
    "\061\102\u0125\105\u011f\107\055\207\177\220\103\001\002" +
    "\000\004\215\u018b\001\ufee7\000\002\001\uff4a\000\146\004" +
    "\146\006\111\007\011\010\200\011\052\012\061\016\131" +
    "\032\106\043\242\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\102\240\103\132" +
    "\104\040\105\066\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\144\332\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\uff7d\000\004\216" +
    "\u018d\001\002\000\002\001\ufee6\000\060\031\u010c\136\u0101" +
    "\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146" +
    "\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f" +
    "\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163" +
    "\374\166\u0100\001\uff3f\000\002\001\uff7a\000\002\001\uff02" +
    "\000\004\016\u0195\001\002\000\004\137\u0194\001\002\000" +
    "\002\001\uffbd\000\002\001\uffd0\000\004\216\u0196\001\002" +
    "\000\002\001\uffbc\000\144\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\002\000\070\031\u010c\116\u0104\117\u0114\120\376\136" +
    "\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112" +
    "\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154" +
    "\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109" +
    "\163\374\166\u0100\216\u0199\001\002\000\222\003\121\004" +
    "\146\005\160\006\111\007\011\010\033\011\052\012\061" +
    "\014\076\016\131\017\125\020\122\021\043\023\032\025" +
    "\104\027\161\032\106\034\133\040\054\041\124\042\070" +
    "\043\242\045\141\046\037\050\156\051\236\052\012\054" +
    "\100\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\077\064\102\240\103\132\104" +
    "\040\105\066\106\022\107\055\110\027\111\071\112\047" +
    "\113\127\114\110\121\063\137\010\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\041\215\153\217\u019a\220\103\221\115\222\057\001\002" +
    "\000\002\001\uffea\000\002\001\uff91\000\006\205\u019f\206" +
    "\u019e\001\uff8d\000\002\001\uffe2\000\220\003\121\004\146" +
    "\005\160\006\111\007\011\010\033\011\052\012\061\014" +
    "\076\016\131\017\125\020\122\021\043\023\032\025\104" +
    "\027\161\032\106\034\133\040\054\041\124\042\070\043" +
    "\242\045\141\046\037\050\156\051\236\052\012\054\100" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\077\064\102\240\103\132\104\040" +
    "\105\066\106\022\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\137\010\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\041" +
    "\215\153\220\103\221\115\222\057\001\002\000\004\215" +
    "\u01a0\001\002\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\070\031\u010c\116\u0104\117\u0114\120\376\136\u0101" +
    "\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146" +
    "\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f" +
    "\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163" +
    "\374\166\u0100\216\u01a2\001\002\000\220\003\121\004\146" +
    "\005\160\006\111\007\011\010\033\011\052\012\061\014" +
    "\076\016\131\017\125\020\122\021\043\023\032\025\104" +
    "\027\161\032\106\034\133\040\054\041\124\042\070\043" +
    "\242\045\141\046\037\050\156\051\236\052\012\054\100" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\077\064\102\240\103\132\104\040" +
    "\105\066\106\022\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\137\010\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\041" +
    "\215\153\220\103\221\115\222\057\001\002\000\002\001" +
    "\uff90\000\002\001\uff8c\000\232\003\121\004\146\005\160" +
    "\006\111\007\011\010\033\011\052\012\061\014\076\016" +
    "\131\017\125\020\122\021\043\023\032\025\104\027\161" +
    "\032\106\034\133\040\054\041\124\042\070\043\112\045" +
    "\141\046\037\050\156\051\236\052\012\054\100\055\152" +
    "\056\030\057\266\060\031\061\145\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\077\064\102\240" +
    "\103\132\104\040\105\066\106\022\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\137\010\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\041\210\062\211\017\215\153\220\103\221" +
    "\115\222\057\001\uff8f\000\006\205\u01a9\206\u01a8\001\uff8b" +
    "\000\004\204\u01b1\001\002\000\004\217\u01af\001\002\000" +
    "\004\215\u01aa\001\002\000\144\004\146\006\111\007\011" +
    "\010\200\011\052\012\061\016\131\032\106\043\242\055" +
    "\152\056\030\066\154\067\013\070\020\071\044\072\046" +
    "\073\135\074\006\102\240\103\132\104\040\105\066\107" +
    "\055\110\027\111\071\112\047\113\127\114\110\121\063" +
    "\157\107\160\067\164\150\165\014\167\051\170\155\171" +
    "\026\172\136\173\036\174\130\175\074\176\137\177\073" +
    "\200\034\203\077\207\177\215\153\220\103\221\115\222" +
    "\057\001\002\000\070\031\u010c\116\u0104\117\u0114\120\376" +
    "\136\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d\145" +
    "\u0112\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102" +
    "\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162" +
    "\u0109\163\374\166\u0100\216\u01ac\001\002\000\004\217\u01ad" +
    "\001\002\000\002\001\uffea\000\232\003\121\004\146\005" +
    "\160\006\111\007\011\010\033\011\052\012\061\014\076" +
    "\016\131\017\125\020\122\021\043\023\032\025\104\027" +
    "\161\032\106\034\133\040\054\041\124\042\070\043\112" +
    "\045\141\046\037\050\156\051\236\052\012\054\100\055" +
    "\152\056\030\057\266\060\031\061\145\066\154\067\013" +
    "\070\020\071\044\072\046\073\135\074\006\077\064\102" +
    "\240\103\132\104\040\105\066\106\022\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\137\010\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\041\210\062\211\017\215\153\220\103" +
    "\221\115\222\057\001\uff8e\000\002\001\uffea\000\232\003" +
    "\121\004\146\005\160\006\111\007\011\010\033\011\052" +
    "\012\061\014\076\016\131\017\125\020\122\021\043\023" +
    "\032\025\104\027\161\032\106\034\133\040\054\041\124" +
    "\042\070\043\112\045\141\046\037\050\156\051\236\052" +
    "\012\054\100\055\152\056\030\057\266\060\031\061\145" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\077\064\102\240\103\132\104\040\105\066\106\022" +
    "\107\055\110\027\111\071\112\047\113\127\114\110\121" +
    "\063\137\010\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\041\210\062\211\017" +
    "\215\153\220\103\221\115\222\057\001\uff8a\000\004\137" +
    "\u01b2\001\002\000\002\001\uffe1\000\070\031\u010c\116\u0104" +
    "\117\u0114\120\376\136\u0101\137\u01b4\140\375\141\u010e\142" +
    "\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105" +
    "\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157" +
    "\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\002" +
    "\000\002\001\uffc9\000\002\001\uff39\000\002\001\ufebf\000" +
    "\022\010\200\012\061\066\u01bb\102\350\105\345\107\055" +
    "\207\177\220\103\001\ufe99\000\006\115\u01bf\216\u01c1\001" +
    "\002\000\002\001\ufe9c\000\002\001\ufe9b\000\004\215\u01bc" +
    "\001\002\000\022\010\200\012\061\066\u01bb\102\350\105" +
    "\345\107\055\207\177\220\103\001\ufe99\000\006\115\u01bf" +
    "\216\u01be\001\002\000\002\001\ufe9a\000\022\010\200\012" +
    "\061\066\u01bb\102\350\105\345\107\055\207\177\220\103" +
    "\001\ufe99\000\002\001\ufe9d\000\004\122\u01c2\001\002\000" +
    "\144\004\146\006\111\007\011\010\200\011\052\012\061" +
    "\016\131\032\106\043\242\055\152\056\030\066\154\067" +
    "\013\070\020\071\044\072\046\073\135\074\006\102\240" +
    "\103\132\104\040\105\066\107\055\110\027\111\071\112" +
    "\047\113\127\114\110\121\063\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\002\000\060\031" +
    "\u010c\136\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d" +
    "\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153" +
    "\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a" +
    "\162\u0109\163\374\166\u0100\001\uff4d\000\070\031\u010c\116" +
    "\u0104\117\u0114\120\376\136\u0101\140\375\141\u010e\142\377" +
    "\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151" +
    "\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113" +
    "\160\u0103\161\u010a\162\u0109\163\374\166\u0100\216\u01c5\001" +
    "\002\000\002\001\uff1b\000\020\010\200\012\061\102\350" +
    "\105\345\107\055\207\177\220\103\001\002\000\002\001" +
    "\ufe7a\000\006\115\u01ca\216\u01c9\001\002\000\002\001\ufe81" +
    "\000\020\010\200\012\061\102\350\105\345\107\055\207" +
    "\177\220\103\001\002\000\002\001\ufe79\000\004\031\u010c" +
    "\001\uff26\000\146\004\146\006\111\007\011\010\200\011" +
    "\052\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\216\u01d0\220\103\221\115\222\057" +
    "\001\002\000\002\001\uff10\000\070\031\u010c\116\u0104\117" +
    "\u0114\120\376\136\u0101\140\375\141\u010e\142\377\143\u0106" +
    "\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152" +
    "\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103" +
    "\161\u010a\162\u0109\163\374\166\u0100\216\u01d1\001\002\000" +
    "\002\001\ufeec\000\002\001\ufeeb\000\010\010\u01d3\012\061" +
    "\220\103\001\002\000\004\215\u0169\001\ufe77\000\002\001" +
    "\uffd8\000\040\122\u0170\123\u0174\124\u0171\125\u017a\126\u0173" +
    "\127\u0179\130\u0176\131\u0178\132\u0172\133\u016f\134\u0175\135" +
    "\u0177\137\u01d8\167\ufebf\170\ufebf\001\ufec1\000\004\137\u01d7" +
    "\001\ufec2\000\002\001\uffd7\000\002\001\uffd6\000\004\122" +
    "\u01da\001\002\000\046\006\111\007\011\010\200\016\131" +
    "\067\174\070\020\071\044\072\046\073\135\074\006\102" +
    "\202\103\132\104\040\105\173\107\055\157\201\160\171" +
    "\207\177\001\002\000\002\001\uff54\000\002\001\uff12\000" +
    "\002\001\uff16\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\070\031\u010c\116\u0104\117\u0114\120\376\136\u0101" +
    "\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146" +
    "\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f" +
    "\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163" +
    "\374\166\u0100\216\u01e0\001\002\000\006\077\u01e2\217\u01e3" +
    "\001\002\000\002\001\uffdd\000\004\137\u01f3\001\uff98\000" +
    "\004\137\u01e5\001\uff98\000\010\035\u01f1\036\u01e8\037\u01e9" +
    "\001\002\000\002\001\uff98\000\010\035\u01e7\036\u01e8\037" +
    "\u01e9\001\002\000\002\001\uff99\000\144\004\146\006\111" +
    "\007\011\010\200\011\052\012\061\016\131\032\106\043" +
    "\242\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\102\240\103\132\104\040\105" +
    "\066\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\177\215\153\220\103\221" +
    "\115\222\057\001\002\000\006\137\u01ec\217\u01eb\001\002" +
    "\000\002\001\uffea\000\002\001\uff95\000\002\001\uff94\000" +
    "\232\003\121\004\146\005\160\006\111\007\011\010\033" +
    "\011\052\012\061\014\076\016\131\017\125\020\122\021" +
    "\043\023\032\025\104\027\161\032\106\034\133\040\054" +
    "\041\124\042\070\043\112\045\141\046\037\050\156\051" +
    "\236\052\012\054\100\055\152\056\030\057\266\060\031" +
    "\061\145\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\077\064\102\240\103\132\104\040\105\066" +
    "\106\022\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\137\010\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\041\210\062" +
    "\211\017\215\153\220\103\221\115\222\057\001\uff96\000" +
    "\072\031\u010c\116\u0104\117\u0114\120\376\136\u0101\137\u01ec" +
    "\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146" +
    "\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f" +
    "\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163" +
    "\374\166\u0100\217\u01eb\001\002\000\002\001\uffea\000\232" +
    "\003\121\004\146\005\160\006\111\007\011\010\033\011" +
    "\052\012\061\014\076\016\131\017\125\020\122\021\043" +
    "\023\032\025\104\027\161\032\106\034\133\040\054\041" +
    "\124\042\070\043\112\045\141\046\037\050\156\051\236" +
    "\052\012\054\100\055\152\056\030\057\266\060\031\061" +
    "\145\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\077\064\102\240\103\132\104\040\105\066\106" +
    "\022\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\137\010\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\041\210\062\211" +
    "\017\215\153\220\103\221\115\222\057\001\uff97\000\002" +
    "\001\uff9a\000\010\036\u01e8\037\u01e9\100\u01f6\001\002\000" +
    "\002\001\uff98\000\010\036\u01e8\037\u01e9\100\u01f5\001\002" +
    "\000\002\001\uff9b\000\002\001\uff9c\000\002\001\uff14\000" +
    "\066\031\u010c\116\u0104\117\u0114\120\376\136\u0101\140\375" +
    "\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147" +
    "\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b" +
    "\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166" +
    "\u0100\001\ufe7c\000\006\115\u01fb\137\u01fc\001\002\000\066" +
    "\031\u010c\116\u0104\117\u0114\120\376\136\u0101\140\375\141" +
    "\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373" +
    "\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156" +
    "\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100" +
    "\001\uff52\000\144\004\146\006\111\007\011\010\200\011" +
    "\052\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\002" +
    "\000\002\001\uffd3\000\066\031\u010c\116\u0104\117\u0114\120" +
    "\376\136\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d" +
    "\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153" +
    "\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a" +
    "\162\u0109\163\374\166\u0100\001\uff53\000\002\001\uffda\000" +
    "\070\031\u010c\116\u0104\117\u0114\120\376\136\u0101\137\u0200" +
    "\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146" +
    "\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f" +
    "\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163" +
    "\374\166\u0100\001\002\000\002\001\uffd9\000\004\021\u0202" +
    "\001\002\000\004\215\u0203\001\002\000\144\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\157\107\160\067\164\150\165\014\167\051" +
    "\170\155\171\026\172\136\173\036\174\130\175\074\176" +
    "\137\177\073\200\034\203\077\207\177\215\153\220\103" +
    "\221\115\222\057\001\002\000\070\031\u010c\116\u0104\117" +
    "\u0114\120\376\136\u0101\140\375\141\u010e\142\377\143\u0106" +
    "\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152" +
    "\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103" +
    "\161\u010a\162\u0109\163\374\166\u0100\216\u0205\001\002\000" +
    "\004\137\u0206\001\002\000\002\001\uffdf\000\004\010\u0209" +
    "\001\002\000\002\001\ufff2\000\004\122\u020a\001\002\000" +
    "\046\006\111\007\011\010\200\016\131\067\174\070\020" +
    "\071\044\072\046\073\135\074\006\102\202\103\132\104" +
    "\040\105\173\107\055\157\201\160\171\207\177\001\002" +
    "\000\002\001\uff55\000\004\062\u020e\001\uffae\000\004\077" +
    "\u0213\001\002\000\012\010\200\102\253\105\256\107\055" +
    "\001\002\000\004\115\u0211\001\uffad\000\002\001\uffaa\000" +
    "\012\010\200\102\253\105\256\107\055\001\002\000\002" +
    "\001\uffa9\000\002\001\uff6c\000\026\044\140\053\u0217\100" +
    "\u021c\106\u0222\207\u0219\210\u021d\211\u021f\212\u0221\213\u0218" +
    "\214\u021b\001\uff63\000\006\115\u0207\137\u023a\001\002\000" +
    "\002\001\uff6d\000\002\001\uff64\000\002\001\uff5e\000\002" +
    "\001\uff5c\000\002\001\uff61\000\002\001\uff5f\000\002\001" +
    "\uffb5\000\002\001\uff5b\000\004\012\u0231\001\002\000\002" +
    "\001\uff5a\000\020\043\uff62\207\u0219\210\u021d\211\u021f\212" +
    "\u0221\213\u0218\214\u021b\001\uff65\000\002\001\uff5d\000\220" +
    "\003\121\004\146\005\160\006\111\007\011\010\200\011" +
    "\052\012\061\014\076\016\131\017\125\020\122\021\043" +
    "\023\032\025\104\027\161\032\106\034\133\040\054\041" +
    "\124\042\070\043\242\045\141\046\037\050\156\051\236" +
    "\052\012\054\100\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\077\064\102\240" +
    "\103\132\104\040\105\066\106\022\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\137\010\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\041\215\153\220\103\221\115\222\057\001" +
    "\002\000\004\043\u0224\001\002\000\004\144\244\001\uffb9" +
    "\000\006\010\166\107\164\001\002\000\004\215\u0227\001" +
    "\002\000\016\010\200\067\247\102\253\105\256\107\055" +
    "\216\uff88\001\uff81\000\004\216\u0229\001\002\000\006\077" +
    "\u022b\137\u022c\001\002\000\002\001\uff69\000\002\001\uffea" +
    "\000\002\001\uff67\000\234\003\121\004\146\005\160\006" +
    "\111\007\011\010\033\011\052\012\061\014\076\016\131" +
    "\017\125\020\122\021\043\023\032\025\104\027\161\032" +
    "\106\034\133\040\054\041\124\042\070\043\112\045\141" +
    "\046\037\050\156\051\236\052\012\054\100\055\152\056" +
    "\030\057\266\060\031\061\145\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\077\064\100\u022e\102" +
    "\240\103\132\104\040\105\066\106\022\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\137\010\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\041\210\062\211\017\215\153\220\103" +
    "\221\115\222\057\001\002\000\002\001\uff66\000\002\001" +
    "\uff68\000\002\001\uff60\000\004\122\u0238\001\uff57\000\006" +
    "\115\u0233\137\u0234\001\002\000\004\012\u0235\001\002\000" +
    "\002\001\uff6b\000\004\122\u0236\001\uff59\000\046\006\111" +
    "\007\011\010\200\016\131\067\174\070\020\071\044\072" +
    "\046\073\135\074\006\102\202\103\132\104\040\105\173" +
    "\107\055\157\201\160\171\207\177\001\002\000\002\001" +
    "\uff58\000\046\006\111\007\011\010\200\016\131\067\174" +
    "\070\020\071\044\072\046\073\135\074\006\102\202\103" +
    "\132\104\040\105\173\107\055\157\201\160\171\207\177" +
    "\001\002\000\002\001\uff56\000\002\001\uff6a\000\006\064" +
    "\u024f\201\u024e\001\ufe8a\000\014\012\061\015\u024d\075\u023f" +
    "\076\u023e\221\u024c\001\002\000\002\001\ufe8c\000\020\010" +
    "\200\012\061\102\350\105\345\107\055\207\177\220\103" +
    "\001\002\000\144\004\146\006\111\007\011\010\200\011" +
    "\u0242\012\061\016\131\032\106\043\242\055\152\056\030" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\102\240\103\132\104\040\105\066\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\002" +
    "\000\010\012\061\075\u023f\076\u023e\001\002\000\002\001" +
    "\ufe8b\000\004\201\u0245\001\ufed2\000\070\031\u010c\100\u0244" +
    "\116\u0104\117\u0114\120\376\136\u0101\140\375\141\u010e\142" +
    "\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105" +
    "\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157" +
    "\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\002" +
    "\000\002\001\ufe87\000\144\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\002\000\070\031\u010c\116\u0104\117\u0114\120\376\136" +
    "\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112" +
    "\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154" +
    "\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109" +
    "\163\374\166\u0100\202\u0247\001\002\000\004\100\u0248\001" +
    "\002\000\002\001\ufe86\000\004\100\u024a\001\002\000\002" +
    "\001\ufe85\000\002\001\ufe8e\000\002\001\ufecc\000\002\001" +
    "\ufe8d\000\012\010\166\012\061\013\u0254\107\164\001\002" +
    "\000\006\010\166\107\164\001\002\000\002\001\ufe88\000" +
    "\002\001\ufe82\000\004\202\u0255\001\002\000\002\001\ufe84" +
    "\000\002\001\ufe83\000\002\001\ufe89\000\010\010\166\107" +
    "\164\215\246\001\002\000\004\215\u0258\001\002\000\016" +
    "\010\200\067\247\102\253\105\256\107\055\216\uff88\001" +
    "\uff81\000\004\216\u025a\001\002\000\004\077\u025b\001\002" +
    "\000\002\001\uffea\000\234\003\121\004\146\005\160\006" +
    "\111\007\011\010\033\011\052\012\061\014\076\016\131" +
    "\017\125\020\122\021\043\023\032\025\104\027\161\032" +
    "\106\034\133\040\054\041\124\042\070\043\112\045\141" +
    "\046\037\050\156\051\236\052\012\054\100\055\152\056" +
    "\030\057\266\060\031\061\145\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\077\064\100\u025d\102" +
    "\240\103\132\104\040\105\066\106\022\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\137\010\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\041\210\062\211\017\215\153\220\103" +
    "\221\115\222\057\001\002\000\002\001\uffb7\000\066\031" +
    "\u010c\116\u0104\117\u0114\120\376\136\u0101\140\375\141\u010e" +
    "\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150" +
    "\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107" +
    "\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001" +
    "\ufe7b\000\012\031\u010c\161\u010a\162\u0109\163\374\001\uff28" +
    "\000\002\001\uff48\000\144\004\146\006\111\007\011\010" +
    "\200\011\052\012\061\016\131\032\106\043\242\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\102\240\103\132\104\040\105\066\107\055" +
    "\110\027\111\071\112\047\113\127\114\110\121\063\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\177\215\153\220\103\221\115\222\057" +
    "\001\002\000\040\033\u0272\122\u0170\123\u0174\124\u0171\125" +
    "\u017a\126\u0173\127\u0179\130\u0176\131\u0178\132\u0172\133\u016f" +
    "\134\u0175\135\u0177\167\ufebf\170\ufebf\001\ufec1\000\004\033" +
    "\u0264\001\ufec2\000\020\010\200\012\061\102\350\105\345" +
    "\107\055\207\177\220\103\001\002\000\004\065\u0267\001" +
    "\uffa8\000\004\216\u026c\001\002\000\022\010\200\012\061" +
    "\102\350\105\345\107\055\144\u026a\207\177\220\103\001" +
    "\002\000\002\001\uffa7\000\002\001\uffa6\000\020\010\200" +
    "\012\061\102\350\105\345\107\055\207\177\220\103\001" +
    "\002\000\002\001\uffa5\000\222\003\121\004\146\005\160" +
    "\006\111\007\011\010\033\011\052\012\061\014\076\016" +
    "\131\017\125\020\122\021\043\023\032\025\104\027\161" +
    "\032\106\034\133\040\054\041\124\042\070\043\242\045" +
    "\141\046\037\050\156\051\236\052\012\054\100\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\077\064\102\240\103\132\104\040\105\066" +
    "\106\022\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\137\010\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\041\215\153" +
    "\217\u026d\220\103\221\115\222\057\001\002\000\002\001" +
    "\uffea\000\002\001\uffa2\000\002\001\uffcd\000\234\003\121" +
    "\004\146\005\160\006\111\007\011\010\033\011\052\012" +
    "\061\014\076\016\131\017\125\020\122\021\043\023\032" +
    "\025\104\026\u0271\027\161\032\106\034\133\040\054\041" +
    "\124\042\070\043\112\045\141\046\037\050\156\051\236" +
    "\052\012\054\100\055\152\056\030\057\266\060\031\061" +
    "\145\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\077\064\102\240\103\132\104\040\105\066\106" +
    "\022\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\137\010\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\041\210\062\211" +
    "\017\215\153\220\103\221\115\222\057\001\002\000\002" +
    "\001\uffa1\000\022\010\200\012\061\102\350\105\345\107" +
    "\055\144\u026a\207\177\220\103\001\002\000\004\065\u0267" +
    "\001\uffa8\000\004\216\u0275\001\002\000\222\003\121\004" +
    "\146\005\160\006\111\007\011\010\033\011\052\012\061" +
    "\014\076\016\131\017\125\020\122\021\043\023\032\025" +
    "\104\027\161\032\106\034\133\040\054\041\124\042\070" +
    "\043\242\045\141\046\037\050\156\051\236\052\012\054" +
    "\100\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\077\064\102\240\103\132\104" +
    "\040\105\066\106\022\107\055\110\027\111\071\112\047" +
    "\113\127\114\110\121\063\137\010\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\041\215\153\217\u026d\220\103\221\115\222\057\001\002" +
    "\000\002\001\uffce\000\002\001\uff3c\000\002\001\uff3a\000" +
    "\002\001\ufffb\000\010\077\u027b\105\204\137\u027c\001\002" +
    "\000\002\001\ufffb\000\002\001\ufff6\000\236\003\121\004" +
    "\146\005\160\006\111\007\011\010\033\011\052\012\061" +
    "\014\076\016\131\017\125\020\122\021\043\023\032\025" +
    "\104\027\161\032\106\034\133\040\054\041\124\042\070" +
    "\043\112\044\140\045\141\046\037\050\156\051\025\052" +
    "\012\054\100\055\152\056\030\057\056\060\031\061\145" +
    "\066\154\067\013\070\020\071\044\072\046\073\135\074" +
    "\006\077\064\100\u027e\102\101\103\132\104\040\105\066" +
    "\106\022\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\137\010\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\041\210\062" +
    "\211\017\215\153\220\103\221\115\222\057\001\002\000" +
    "\002\001\ufff5\000\236\003\121\004\146\005\160\006\111" +
    "\007\011\010\033\011\052\012\061\014\076\016\131\017" +
    "\125\020\122\021\043\023\032\025\104\027\161\032\106" +
    "\034\133\040\054\041\124\042\070\043\112\044\140\045" +
    "\141\046\037\050\156\051\025\052\012\054\100\055\152" +
    "\056\030\057\056\060\031\061\145\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\077\064\100\u0280" +
    "\102\101\103\132\104\040\105\066\106\022\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\137\010" +
    "\157\107\160\067\164\150\165\014\167\051\170\155\171" +
    "\026\172\136\173\036\174\130\175\074\176\137\177\073" +
    "\200\034\203\077\207\041\210\062\211\017\215\153\220" +
    "\103\221\115\222\057\001\002\000\002\001\ufff4\000\020" +
    "\010\200\012\061\102\350\105\345\107\055\207\177\220" +
    "\103\001\002\000\002\001\uffc0\000\002\001\uffbe\000\006" +
    "\115\u0286\216\u0285\001\002\000\004\137\u0288\001\002\000" +
    "\020\010\200\012\061\102\350\105\345\107\055\207\177" +
    "\220\103\001\002\000\002\001\uffbf\000\002\001\uffcf\000" +
    "\004\215\u018b\001\ufee7\000\002\001\uff49\000\002\001\uff13" +
    "\000\002\001\uff11\000\010\077\367\201\370\215\ufeb6\001" +
    "\ufeaf\000\066\031\u010c\116\u0104\117\u0114\120\376\136\u0101" +
    "\140\375\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146" +
    "\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f" +
    "\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163" +
    "\374\166\u0100\001\ufe7e\000\004\137\u0290\001\002\000\002" +
    "\001\uffc8\000\012\031\u010c\161\u010a\162\u0109\163\374\001" +
    "\uff27\000\010\101\ufef8\105\204\215\u0163\001\ufece\000\234" +
    "\003\121\004\146\005\160\006\111\007\011\010\033\011" +
    "\052\012\061\014\076\016\131\017\125\020\122\021\043" +
    "\023\032\025\104\027\161\032\106\034\133\040\054\041" +
    "\124\042\070\043\112\045\141\046\037\050\156\051\236" +
    "\052\012\054\100\055\152\056\030\057\266\060\031\061" +
    "\145\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\077\064\100\u0294\102\240\103\132\104\040\105" +
    "\066\106\022\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\137\010\157\107\160\067\164\150\165" +
    "\014\167\051\170\155\171\026\172\136\173\036\174\130" +
    "\175\074\176\137\177\073\200\034\203\077\207\041\210" +
    "\062\211\017\215\153\220\103\221\115\222\057\001\002" +
    "\000\002\001\uffe3\000\060\031\u010c\136\u0101\140\375\141" +
    "\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373" +
    "\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156" +
    "\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100" +
    "\001\uff0b\000\002\001\uffb3\000\010\010\u0298\012\061\220" +
    "\103\001\002\000\004\215\364\001\ufe78\000\004\222\u029c" +
    "\001\002\000\012\012\061\015\u024d\075\u023f\076\u023e\001" +
    "\ufee8\000\010\012\061\075\u023f\076\u023e\001\ufee9\000\002" +
    "\001\uff0c\000\004\216\u029e\001\002\000\004\137\u029f\001" +
    "\002\000\002\001\ufff7\000\002\001\uffdc\000\070\031\u010c" +
    "\116\u0104\117\u0114\120\376\136\u0101\137\u02a2\140\375\141" +
    "\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373" +
    "\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156" +
    "\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100" +
    "\001\002\000\002\001\uffdb\000\002\001\uff3b\000\014\010" +
    "\166\012\061\077\u0134\107\164\220\103\001\002\000\004" +
    "\215\u02a7\001\ufeb8\000\002\001\ufebb\000\146\004\146\006" +
    "\111\007\011\010\200\011\052\012\061\016\131\032\106" +
    "\043\242\055\152\056\030\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\102\240\103\132\104\040" +
    "\105\066\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\144\332\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\177\215\153" +
    "\220\103\221\115\222\057\001\uff7d\000\004\216\u02a9\001" +
    "\002\000\002\001\ufeb9\000\004\064\u02ac\001\ufebe\000\002" +
    "\001\ufebc\000\014\010\166\012\061\077\u0134\107\164\220" +
    "\103\001\002\000\004\215\u02a7\001\ufeb8\000\002\001\ufeba" +
    "\000\144\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\157\107\160\067\164" +
    "\150\165\014\167\051\170\155\171\026\172\136\173\036" +
    "\174\130\175\074\176\137\177\073\200\034\203\077\207" +
    "\177\215\153\220\103\221\115\222\057\001\002\000\070" +
    "\031\u010c\116\u0104\117\u0114\120\376\136\u0101\140\375\141" +
    "\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147\373" +
    "\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156" +
    "\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166\u0100" +
    "\216\u02b1\001\002\000\002\001\ufe7d\000\004\062\u02b3\001" +
    "\uffb1\000\012\010\200\102\253\105\256\107\055\001\002" +
    "\000\004\063\u02b6\001\uffac\000\004\077\u02b8\001\002\000" +
    "\012\010\200\102\253\105\256\107\055\001\002\000\004" +
    "\115\u0211\001\uffab\000\002\001\uff6c\000\026\044\140\053" +
    "\u0217\100\u02ba\106\u0222\207\u0219\210\u021d\211\u021f\212\u0221" +
    "\213\u0218\214\u021b\001\uff63\000\002\001\uffb6\000\002\001" +
    "\uffb0\000\144\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\157\107\160\067" +
    "\164\150\165\014\167\051\170\155\171\026\172\136\173" +
    "\036\174\130\175\074\176\137\177\073\200\034\203\077" +
    "\207\177\215\153\220\103\221\115\222\057\001\002\000" +
    "\070\031\u010c\116\u0104\117\u0114\120\376\136\u0101\140\375" +
    "\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147" +
    "\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b" +
    "\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166" +
    "\u0100\216\u02be\001\002\000\222\003\121\004\146\005\160" +
    "\006\111\007\011\010\033\011\052\012\061\014\076\016" +
    "\131\017\125\020\122\021\043\023\032\025\104\027\161" +
    "\032\106\034\133\040\054\041\124\042\070\043\242\045" +
    "\141\046\037\050\156\051\236\052\012\054\100\055\152" +
    "\056\030\066\154\067\013\070\020\071\044\072\046\073" +
    "\135\074\006\077\064\102\240\103\132\104\040\105\066" +
    "\106\022\107\055\110\027\111\071\112\047\113\127\114" +
    "\110\121\063\137\010\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\041\215\153" +
    "\217\u02bf\220\103\221\115\222\057\001\002\000\002\001" +
    "\uffea\000\002\001\uffe0\000\002\001\uff93\000\234\003\121" +
    "\004\146\005\160\006\111\007\011\010\033\011\052\012" +
    "\061\014\076\016\131\017\125\020\122\021\043\022\u02c3" +
    "\023\032\025\104\027\161\032\106\034\133\040\054\041" +
    "\124\042\070\043\112\045\141\046\037\050\156\051\236" +
    "\052\012\054\100\055\152\056\030\057\266\060\031\061" +
    "\145\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\077\064\102\240\103\132\104\040\105\066\106" +
    "\022\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\137\010\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\041\210\062\211" +
    "\017\215\153\220\103\221\115\222\057\001\002\000\002" +
    "\001\uff92\000\004\122\u02cb\001\uff6f\000\006\115\u02c6\137" +
    "\u02c7\001\002\000\004\012\u02c8\001\002\000\002\001\uffd4" +
    "\000\004\122\u02c9\001\uff71\000\046\006\111\007\011\010" +
    "\200\016\131\067\174\070\020\071\044\072\046\073\135" +
    "\074\006\102\202\103\132\104\040\105\173\107\055\157" +
    "\201\160\171\207\177\001\002\000\002\001\uff70\000\046" +
    "\006\111\007\011\010\200\016\131\067\174\070\020\071" +
    "\044\072\046\073\135\074\006\102\202\103\132\104\040" +
    "\105\173\107\055\157\201\160\171\207\177\001\002\000" +
    "\002\001\uff6e\000\002\001\uffea\000\234\003\121\004\146" +
    "\005\160\006\111\007\011\010\033\011\052\012\061\014" +
    "\076\016\131\017\125\020\122\021\043\023\032\025\104" +
    "\027\161\032\106\034\133\040\054\041\124\042\070\043" +
    "\112\045\141\046\037\050\156\051\236\052\012\054\100" +
    "\055\152\056\030\057\266\060\031\061\145\066\154\067" +
    "\013\070\020\071\044\072\046\073\135\074\006\077\064" +
    "\100\u02cf\102\240\103\132\104\040\105\066\106\022\107" +
    "\055\110\027\111\071\112\047\113\127\114\110\121\063" +
    "\137\010\157\107\160\067\164\150\165\014\167\051\170" +
    "\155\171\026\172\136\173\036\174\130\175\074\176\137" +
    "\177\073\200\034\203\077\207\041\210\062\211\017\215" +
    "\153\220\103\221\115\222\057\001\002\000\004\047\u02d0" +
    "\001\002\000\004\215\u02d1\001\002\000\012\010\200\102" +
    "\253\105\256\107\055\001\002\000\004\012\061\001\002" +
    "\000\004\216\u02d4\001\002\000\004\077\u02d5\001\002\000" +
    "\002\001\uffea\000\234\003\121\004\146\005\160\006\111" +
    "\007\011\010\033\011\052\012\061\014\076\016\131\017" +
    "\125\020\122\021\043\023\032\025\104\027\161\032\106" +
    "\034\133\040\054\041\124\042\070\043\112\045\141\046" +
    "\037\050\156\051\236\052\012\054\100\055\152\056\030" +
    "\057\266\060\031\061\145\066\154\067\013\070\020\071" +
    "\044\072\046\073\135\074\006\077\064\100\u02d7\102\240" +
    "\103\132\104\040\105\066\106\022\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\137\010\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\041\210\062\211\017\215\153\220\103\221" +
    "\115\222\057\001\002\000\004\047\u02d8\001\uffc4\000\004" +
    "\215\u02dd\001\002\000\002\001\uffca\000\002\001\uffc3\000" +
    "\004\047\u02d8\001\uffc5\000\002\001\uffc2\000\012\010\200" +
    "\102\253\105\256\107\055\001\002\000\004\012\u02df\001" +
    "\002\000\004\216\u02e0\001\002\000\004\077\u02e1\001\002" +
    "\000\002\001\uffea\000\234\003\121\004\146\005\160\006" +
    "\111\007\011\010\033\011\052\012\061\014\076\016\131" +
    "\017\125\020\122\021\043\023\032\025\104\027\161\032" +
    "\106\034\133\040\054\041\124\042\070\043\112\045\141" +
    "\046\037\050\156\051\236\052\012\054\100\055\152\056" +
    "\030\057\266\060\031\061\145\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\077\064\100\u02e3\102" +
    "\240\103\132\104\040\105\066\106\022\107\055\110\027" +
    "\111\071\112\047\113\127\114\110\121\063\137\010\157" +
    "\107\160\067\164\150\165\014\167\051\170\155\171\026" +
    "\172\136\173\036\174\130\175\074\176\137\177\073\200" +
    "\034\203\077\207\041\210\062\211\017\215\153\220\103" +
    "\221\115\222\057\001\002\000\002\001\uffc1\000\002\001" +
    "\uff15\000\002\001\uff0f\000\002\001\uffe4\000\144\004\146" +
    "\006\111\007\011\010\200\011\052\012\061\016\131\032" +
    "\106\043\242\055\152\056\030\066\154\067\013\070\020" +
    "\071\044\072\046\073\135\074\006\102\240\103\132\104" +
    "\040\105\066\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\177\215\153\220" +
    "\103\221\115\222\057\001\uff51\000\066\031\u010c\116\u0104" +
    "\117\u0114\120\376\136\u0101\140\375\141\u010e\142\377\143" +
    "\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111" +
    "\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160" +
    "\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff4e\000\004" +
    "\137\u02ed\001\002\000\004\115\u02eb\001\uff50\000\144\004" +
    "\146\006\111\007\011\010\200\011\052\012\061\016\131" +
    "\032\106\043\242\055\152\056\030\066\154\067\013\070" +
    "\020\071\044\072\046\073\135\074\006\102\240\103\132" +
    "\104\040\105\066\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\157\107\160\067\164\150\165\014" +
    "\167\051\170\155\171\026\172\136\173\036\174\130\175" +
    "\074\176\137\177\073\200\034\203\077\207\177\215\153" +
    "\220\103\221\115\222\057\001\002\000\066\031\u010c\116" +
    "\u0104\117\u0114\120\376\136\u0101\140\375\141\u010e\142\377" +
    "\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151" +
    "\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113" +
    "\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\uff4f\000" +
    "\144\004\146\006\111\007\011\010\200\011\052\012\061" +
    "\016\131\032\106\043\242\055\152\056\030\066\154\067" +
    "\013\070\020\071\044\072\046\073\135\074\006\102\240" +
    "\103\132\104\040\105\066\107\055\110\027\111\071\112" +
    "\047\113\127\114\110\121\063\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\177" +
    "\215\153\220\103\221\115\222\057\001\uff51\000\004\137" +
    "\u02ef\001\002\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\uff51\000\004\216\u02f1\001\002\000\222\003\121\004\146" +
    "\005\160\006\111\007\011\010\033\011\052\012\061\014" +
    "\076\016\131\017\125\020\122\021\043\023\032\025\104" +
    "\027\161\032\106\034\133\040\054\041\124\042\070\043" +
    "\242\045\141\046\037\050\156\051\236\052\012\054\100" +
    "\055\152\056\030\066\154\067\013\070\020\071\044\072" +
    "\046\073\135\074\006\077\064\102\240\103\132\104\040" +
    "\105\066\106\022\107\055\110\027\111\071\112\047\113" +
    "\127\114\110\121\063\137\010\157\107\160\067\164\150" +
    "\165\014\167\051\170\155\171\026\172\136\173\036\174" +
    "\130\175\074\176\137\177\073\200\034\203\077\207\041" +
    "\215\153\217\u02f3\220\103\221\115\222\057\001\002\000" +
    "\002\001\uffde\000\002\001\uffea\000\002\001\uffa4\000\234" +
    "\003\121\004\146\005\160\006\111\007\011\010\033\011" +
    "\052\012\061\014\076\016\131\017\125\020\122\021\043" +
    "\023\032\024\u02f6\025\104\027\161\032\106\034\133\040" +
    "\054\041\124\042\070\043\112\045\141\046\037\050\156" +
    "\051\236\052\012\054\100\055\152\056\030\057\266\060" +
    "\031\061\145\066\154\067\013\070\020\071\044\072\046" +
    "\073\135\074\006\077\064\102\240\103\132\104\040\105" +
    "\066\106\022\107\055\110\027\111\071\112\047\113\127" +
    "\114\110\121\063\137\010\157\107\160\067\164\150\165" +
    "\014\167\051\170\155\171\026\172\136\173\036\174\130" +
    "\175\074\176\137\177\073\200\034\203\077\207\041\210" +
    "\062\211\017\215\153\220\103\221\115\222\057\001\002" +
    "\000\002\001\uffa3\000\020\010\200\012\061\102\350\105" +
    "\345\107\055\207\177\220\103\001\002\000\004\216\u02f9" +
    "\001\002\000\002\001\ufe80\000\066\031\u010c\116\u0104\117" +
    "\u0114\120\376\136\u0101\140\375\141\u010e\142\377\143\u0106" +
    "\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111\152" +
    "\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103" +
    "\161\u010a\162\u0109\163\374\166\u0100\001\ufe7f\000\002\001" +
    "\uff17\000\006\033\u0306\105\204\001\uffef\000\002\001\ufff0" +
    "\000\006\010\200\107\055\001\002\000\006\115\u0300\137" +
    "\u0301\001\002\000\010\010\200\105\u02fe\107\055\001\002" +
    "\000\002\001\ufff3\000\002\001\ufff1\000\006\033\u0304\105" +
    "\204\001\uffed\000\004\010\u0305\001\002\000\002\001\uffec" +
    "\000\004\010\u0307\001\002\000\002\001\uffee\000\002\001" +
    "\uffc6\000\002\001\uffb2\000\002\001\uffd1\000\002\001\uff25" +
    "\000\146\004\146\006\111\007\011\010\200\011\052\012" +
    "\061\016\131\032\106\043\242\055\152\056\030\066\154" +
    "\067\013\070\020\071\044\072\046\073\135\074\006\102" +
    "\240\103\132\104\040\105\066\107\055\110\027\111\071" +
    "\112\047\113\127\114\110\121\063\144\u030d\157\107\160" +
    "\067\164\150\165\014\167\051\170\155\171\026\172\136" +
    "\173\036\174\130\175\074\176\137\177\073\200\034\203" +
    "\077\207\177\215\153\220\103\221\115\222\057\001\ufe98" +
    "\000\020\010\200\012\061\102\350\105\345\107\055\207" +
    "\177\220\103\001\002\000\070\031\u010c\065\u031b\116\u0104" +
    "\117\u0114\120\376\136\u0101\140\375\141\u010e\142\377\143" +
    "\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151\u0111" +
    "\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113\160" +
    "\u0103\161\u010a\162\u0109\163\374\166\u0100\001\ufe93\000\004" +
    "\115\u0312\001\ufec9\000\004\216\u0311\001\002\000\002\001" +
    "\uff0d\000\146\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\144\u0314\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\ufec8\000\002\001\ufe97\000\020\010\200\012\061\102\350" +
    "\105\345\107\055\207\177\220\103\001\002\000\070\031" +
    "\u010c\065\u0316\116\u0104\117\u0114\120\376\136\u0101\140\375" +
    "\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147" +
    "\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b" +
    "\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166" +
    "\u0100\001\ufe95\000\146\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\144\u0317" +
    "\157\107\160\067\164\150\165\014\167\051\170\155\171" +
    "\026\172\136\173\036\174\130\175\074\176\137\177\073" +
    "\200\034\203\077\207\177\215\153\220\103\221\115\222" +
    "\057\001\002\000\020\010\200\012\061\102\350\105\345" +
    "\107\055\207\177\220\103\001\002\000\066\031\u010c\116" +
    "\u0104\117\u0114\120\376\136\u0101\140\375\141\u010e\142\377" +
    "\143\u0106\144\u010d\145\u0112\146\u0108\147\373\150\u0105\151" +
    "\u0111\152\u0110\153\u0102\154\u010f\155\u010b\156\u0107\157\u0113" +
    "\160\u0103\161\u010a\162\u0109\163\374\166\u0100\001\ufe96\000" +
    "\002\001\ufe92\000\002\001\ufe91\000\146\004\146\006\111" +
    "\007\011\010\200\011\052\012\061\016\131\032\106\043" +
    "\242\055\152\056\030\066\154\067\013\070\020\071\044" +
    "\072\046\073\135\074\006\102\240\103\132\104\040\105" +
    "\066\107\055\110\027\111\071\112\047\113\127\114\110" +
    "\121\063\144\u031c\157\107\160\067\164\150\165\014\167" +
    "\051\170\155\171\026\172\136\173\036\174\130\175\074" +
    "\176\137\177\073\200\034\203\077\207\177\215\153\220" +
    "\103\221\115\222\057\001\002\000\020\010\200\012\061" +
    "\102\350\105\345\107\055\207\177\220\103\001\002\000" +
    "\066\031\u010c\116\u0104\117\u0114\120\376\136\u0101\140\375" +
    "\141\u010e\142\377\143\u0106\144\u010d\145\u0112\146\u0108\147" +
    "\373\150\u0105\151\u0111\152\u0110\153\u0102\154\u010f\155\u010b" +
    "\156\u0107\157\u0113\160\u0103\161\u010a\162\u0109\163\374\166" +
    "\u0100\001\ufe94\000\002\001\ufe90\000\002\001\ufe8f\000\006" +
    "\115\u0329\137\u032a\001\002\000\002\001\uff74\000\022\010" +
    "\200\012\061\077\u0326\102\350\105\345\107\055\207\177" +
    "\220\103\001\002\000\002\001\uff75\000\002\001\uff73\000" +
    "\002\001\ufec1\000\144\004\146\006\111\007\011\010\200" +
    "\011\052\012\061\016\131\032\106\043\242\055\152\056" +
    "\030\066\154\067\013\070\020\071\044\072\046\073\135" +
    "\074\006\102\240\103\132\104\040\105\066\107\055\110" +
    "\027\111\071\112\047\113\127\114\110\121\063\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\002\000\070\031\u010c\100\u0328\116\u0104\117\u0114\120\376" +
    "\136\u0101\140\375\141\u010e\142\377\143\u0106\144\u010d\145" +
    "\u0112\146\u0108\147\373\150\u0105\151\u0111\152\u0110\153\u0102" +
    "\154\u010f\155\u010b\156\u0107\157\u0113\160\u0103\161\u010a\162" +
    "\u0109\163\374\166\u0100\001\002\000\002\001\uff72\000\006" +
    "\012\u0321\220\u0322\001\002\000\002\001\uffd5\000\002\001" +
    "\uff76\000\146\004\146\006\111\007\011\010\200\011\052" +
    "\012\061\016\131\032\106\043\242\055\152\056\030\066" +
    "\154\067\013\070\020\071\044\072\046\073\135\074\006" +
    "\102\240\103\132\104\040\105\066\107\055\110\027\111" +
    "\071\112\047\113\127\114\110\121\063\144\332\157\107" +
    "\160\067\164\150\165\014\167\051\170\155\171\026\172" +
    "\136\173\036\174\130\175\074\176\137\177\073\200\034" +
    "\203\077\207\177\215\153\220\103\221\115\222\057\001" +
    "\uff7d\000\004\216\u032e\001\002\000\002\001\ufefc\000\002" +
    "\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u032d\000\006\003\003\007\004\001\001\000\002\001" +
    "\001\000\100\004\146\010\156\011\150\014\113\056\141" +
    "\057\041\062\112\064\014\070\015\071\052\072\142\073" +
    "\122\100\071\111\064\113\116\116\057\121\117\130\104" +
    "\131\125\132\023\136\133\137\022\140\044\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\u031f\046\u0322\001\001" +
    "\000\002\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u030a\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\004\146\014\u0307\056\141" +
    "\057\041\062\112\064\014\070\015\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\u02fb" +
    "\005\u02fc\006\u02fe\017\u0191\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u02fa\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\054\004\146\056\141\057\041\062\112\064" +
    "\014\070\u02f9\071\052\072\142\073\122\100\071\111\064" +
    "\116\057\132\023\145\143\147\101\150\006\152\020\154" +
    "\115\156\074\160\034\164\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\146\056\141\057\041\062\112\064\014\070\u02e4" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\002\001\001\000\054\004" +
    "\146\056\141\057\041\062\112\064\014\070\u02e3\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u02c4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\350\057\041" +
    "\071\052\072\343\073\122\100\071\116\346\132\u01b5\147" +
    "\u02a2\150\006\152\020\154\115\160\034\164\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u02a0\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\105" +
    "\u0299\106\u0298\107\u023c\154\u023a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u0294\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\004\012\u0292\001\001\000\002\001\001\000" +
    "\004\004\u0291\001\001\000\054\004\146\056\141\057\041" +
    "\062\112\064\014\070\u0290\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\023\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\002\001\001\000\054\004\146\056\141\057\041\062\112" +
    "\064\014\070\u028d\071\052\072\142\073\122\100\071\111" +
    "\064\116\057\132\023\145\143\147\101\150\006\152\020" +
    "\154\115\156\074\160\034\164\047\001\001\000\010\071" +
    "\u028c\073\122\154\115\001\001\000\054\004\146\056\141" +
    "\057\041\062\112\064\014\070\u028b\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\054\004\146\056\141\057\041\062\112\064\014" +
    "\070\u028a\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\023\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\004\u0125\071\u011f\072\u011d\073\122" +
    "\100\u0123\116\u0120\152\020\154\115\155\u0288\157\u011c\160" +
    "\u0122\001\001\000\002\001\001\000\004\004\u0279\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\004\146\056\141\057\041\062\112" +
    "\064\014\070\u025f\071\052\072\142\073\122\100\071\111" +
    "\064\116\057\132\023\145\143\147\101\150\006\152\020" +
    "\154\115\156\074\160\034\164\047\001\001\000\054\004" +
    "\146\056\141\057\041\062\112\064\014\070\u025e\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u025d\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\002" +
    "\001\001\000\004\052\u0255\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\105\u023b\107\u023c\154\u023a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\004\146\011\u0200\014\113\056\141" +
    "\057\041\062\112\064\014\070\015\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\002\001\001\000\054\004\146\056\141\057\041" +
    "\062\112\064\014\070\u01fe\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\023\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\056\004\146\053\u01f8\056\141\057\041\062\112\064\014" +
    "\070\u01f9\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\023\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\054\004\146\056\141\057\041\062\112\064\014\070\u01f7" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\054\004\146\056\141\057" +
    "\041\062\112\064\014\070\u01f6\071\052\072\142\073\122" +
    "\100\071\111\064\116\057\132\023\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\004\146\056\141" +
    "\057\041\062\112\064\014\070\u01dc\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\054\004\146\056\141\057\041\062\112\064\014" +
    "\070\u01db\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\023\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\054\004\146\056\u01d5\057\041\062\112\064\014\070\332" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\u01d4\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\u01cd" +
    "\001\001\000\002\001\001\000\054\004\146\056\141\057" +
    "\041\062\112\064\014\070\u01cb\071\052\072\142\073\122" +
    "\100\071\111\064\116\057\132\023\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u01c3\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\036\004\350\057\041\071" +
    "\052\072\343\073\122\100\071\116\346\132\u01b5\147\u01b4" +
    "\150\006\152\020\154\115\160\034\164\047\001\001\000" +
    "\054\004\146\056\141\057\041\062\112\064\014\070\u01b2" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\162\112\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\202\062\167\063\175\116\174" +
    "\163\171\001\001\000\002\001\001\000\014\004\202\062" +
    "\167\063\227\116\174\163\171\001\001\000\002\001\001" +
    "\000\004\004\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\202\062\167\063\207\116\174\163\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\202\062\167\063\215\065\213\067\214\116" +
    "\174\163\171\001\001\000\002\001\001\000\004\066\221" +
    "\001\001\000\002\001\001\000\014\004\202\062\167\063" +
    "\217\116\174\163\171\001\001\000\002\001\001\000\014" +
    "\004\202\062\167\063\222\116\174\163\171\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\202\062\167" +
    "\063\224\116\174\163\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\004\146\011\242\014\113\024\236\056\141\057\041\062" +
    "\112\064\014\070\015\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\004" +
    "\112\232\001\001\000\002\001\001\000\014\004\202\062" +
    "\167\063\234\116\174\163\171\001\001\000\002\001\001" +
    "\000\004\017\u0191\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\323\001\001\000\004\052\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\247\036\256\041\251\042\254\117\253\144\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\307\001\001\000\002\001" +
    "\001\000\004\037\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\263\001\001\000\076\004\146\011" +
    "\271\013\264\014\113\056\141\057\041\062\112\064\014" +
    "\070\015\071\052\072\142\073\122\100\071\111\064\113" +
    "\116\116\057\130\266\131\270\132\023\136\133\137\022" +
    "\140\044\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\311\001\001\000\002\001\001\000\012\004\247\042" +
    "\313\117\253\144\250\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\202\062\167\063" +
    "\317\116\174\163\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\202\062\167\063\322\116\174\163" +
    "\171\001\001\000\002\001\001\000\076\004\146\011\271" +
    "\013\264\014\113\056\141\057\041\062\112\064\014\070" +
    "\015\071\052\072\142\073\122\100\071\111\064\113\116" +
    "\116\057\130\266\131\270\132\023\136\133\137\022\140" +
    "\044\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\002\001\001\000\004\004" +
    "\326\001\001\000\002\001\001\000\060\004\146\043\330" +
    "\044\334\056\335\057\041\062\112\064\014\070\332\071" +
    "\052\072\142\073\122\100\071\111\064\116\057\132\333" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\002\001\001\000\036\004\350" +
    "\057\041\071\052\072\343\073\122\100\071\115\u018e\116" +
    "\346\132\345\150\006\152\020\154\115\160\034\164\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\146\056\341\057\041" +
    "\062\112\064\014\070\332\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\337\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\002\001\001\000\036\004\350\057\041\071\052\072\343" +
    "\073\122\100\071\115\342\116\346\132\345\150\006\152" +
    "\020\154\115\160\034\164\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\u0161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\004\146\043\352\044\334\056" +
    "\335\057\041\062\112\064\014\070\332\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\333\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\355\001\001\000\002\001\001\000\014\071\361\073\122" +
    "\100\360\150\357\154\115\001\001\000\002\001\001\000" +
    "\010\071\u015d\073\122\154\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\004\146\043\364\044\334\056" +
    "\335\057\041\062\112\064\014\070\332\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\333\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\004" +
    "\146\056\141\057\041\062\112\064\014\070\u015b\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\056\004\146\056\141\057\041\062" +
    "\112\064\014\070\371\071\052\072\142\073\122\074\370" +
    "\100\071\111\064\116\057\132\023\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u0159\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\054\004\146\056\141\057\041\062\112\064" +
    "\014\070\u0158\071\052\072\142\073\122\100\071\111\064" +
    "\116\057\132\023\145\143\147\101\150\006\152\020\154" +
    "\115\156\074\160\034\164\047\001\001\000\054\004\146" +
    "\056\141\057\041\062\112\064\014\070\u0157\071\052\072" +
    "\142\073\122\100\071\111\064\116\057\132\023\145\143" +
    "\147\101\150\006\152\020\154\115\156\074\160\034\164" +
    "\047\001\001\000\054\004\146\056\141\057\041\062\112" +
    "\064\014\070\u0156\071\052\072\142\073\122\100\071\111" +
    "\064\116\057\132\023\145\143\147\101\150\006\152\020" +
    "\154\115\156\074\160\034\164\047\001\001\000\054\004" +
    "\146\056\141\057\041\062\112\064\014\070\u0155\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u0154\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\054" +
    "\004\146\056\141\057\041\062\112\064\014\070\u0150\071" +
    "\052\072\142\073\122\100\071\111\064\116\057\132\023" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\054\004\146\056\141\057\041" +
    "\062\112\064\014\070\u014e\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\023\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\054\004\146\056\141\057\041\062\112\064\014\070\u014d" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\054\004\146\056\141\057" +
    "\041\062\112\064\014\070\u014c\071\052\072\142\073\122" +
    "\100\071\111\064\116\057\132\023\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\054\004\146\056\141\057\041\062\112\064\014\070" +
    "\u014b\071\052\072\142\073\122\100\071\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\054\004\146\056\141" +
    "\057\041\062\112\064\014\070\u014a\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\054\004\146\056\141\057\041\062\112\064\014" +
    "\070\u0149\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\023\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u0148\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\054\004\146\056\141\057\041\062\112\064" +
    "\014\070\u0147\071\052\072\142\073\122\100\071\111\064" +
    "\116\057\132\023\145\143\147\101\150\006\152\020\154" +
    "\115\156\074\160\034\164\047\001\001\000\054\004\146" +
    "\056\141\057\041\062\112\064\014\070\u0146\071\052\072" +
    "\142\073\122\100\071\111\064\116\057\132\023\145\143" +
    "\147\101\150\006\152\020\154\115\156\074\160\034\164" +
    "\047\001\001\000\054\004\146\056\141\057\041\062\112" +
    "\064\014\070\u0145\071\052\072\142\073\122\100\071\111" +
    "\064\116\057\132\023\145\143\147\101\150\006\152\020" +
    "\154\115\156\074\160\034\164\047\001\001\000\030\004" +
    "\u0125\071\u011f\072\u011d\073\122\100\u0123\116\u0120\152\020" +
    "\154\115\155\u0121\157\u011c\160\u0122\001\001\000\054\004" +
    "\146\056\141\057\041\062\112\064\014\070\u011b\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u011a\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\054" +
    "\004\146\056\141\057\041\062\112\064\014\070\u0119\071" +
    "\052\072\142\073\122\100\071\111\064\116\057\132\023" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\054\004\146\056\141\057\041" +
    "\062\112\064\014\070\u0118\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\023\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\054\004\146\056\141\057\041\062\112\064\014\070\u0117" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\054\004\146\056\141\057" +
    "\041\062\112\064\014\070\u0116\071\052\072\142\073\122" +
    "\100\071\111\064\116\057\132\023\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\054\004\146\056\141\057\041\062\112\064\014\070" +
    "\u0115\071\052\072\142\073\122\100\071\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\054\004\146\056\141" +
    "\057\041\062\112\064\014\070\u0114\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u0142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\071\u0128\073\122\154\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u0127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u012b\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\071" +
    "\361\073\122\075\u0131\076\u0132\077\u012f\100\360\112\u012e" +
    "\150\u0130\154\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\161\u013c\001\001\000\002" +
    "\001\001\000\054\004\146\056\141\057\041\062\112\064" +
    "\014\070\u0134\071\052\072\142\073\122\100\071\111\064" +
    "\116\057\132\023\145\143\147\101\150\006\152\020\154" +
    "\115\156\074\160\034\164\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u013a\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\056" +
    "\004\146\056\141\057\041\062\112\064\014\070\371\071" +
    "\052\072\142\073\122\074\u0138\100\071\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\162" +
    "\u013d\001\001\000\002\001\001\000\024\071\361\073\122" +
    "\075\u013f\076\u0132\077\u012f\100\360\112\u012e\150\u0130\154" +
    "\115\001\001\000\002\001\001\000\014\071\361\073\122" +
    "\100\360\150\u0141\154\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\071\361\073\122\100\360\150\u0144" +
    "\154\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\004\146" +
    "\056\141\057\041\062\112\064\014\070\u0153\071\052\072" +
    "\142\073\122\100\071\111\064\116\057\132\023\145\143" +
    "\147\101\150\006\152\020\154\115\156\074\160\034\164" +
    "\047\001\001\000\002\001\001\000\054\004\146\056\141" +
    "\057\041\062\112\064\014\070\u0152\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\004" +
    "\146\043\u015f\044\334\056\335\057\041\062\112\064\014" +
    "\070\332\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\333\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\004\146\043\u0163" +
    "\044\334\056\335\057\041\062\112\064\014\070\332\071" +
    "\052\072\142\073\122\100\071\111\064\116\057\132\333" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\071\361\073\122\100\360\150\u0166\154\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\004\146" +
    "\043\u0169\044\334\056\335\057\041\062\112\064\014\070" +
    "\332\071\052\072\142\073\122\100\071\111\064\116\057" +
    "\132\333\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\004\146\043\u016c\044\334\056\335\057" +
    "\041\062\112\064\014\070\332\071\052\072\142\073\122" +
    "\100\071\111\064\116\057\132\333\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u018d\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\054\004\146\056\141\057\041\062\112\064" +
    "\014\070\u0185\071\052\072\142\073\122\100\071\111\064" +
    "\116\057\132\023\145\143\147\101\150\006\152\020\154" +
    "\115\156\074\160\034\164\047\001\001\000\054\004\146" +
    "\056\141\057\041\062\112\064\014\070\u0183\071\052\072" +
    "\142\073\122\100\071\111\064\116\057\132\023\145\143" +
    "\147\101\150\006\152\020\154\115\156\074\160\034\164" +
    "\047\001\001\000\054\004\146\056\141\057\041\062\112" +
    "\064\014\070\u0182\071\052\072\142\073\122\100\071\111" +
    "\064\116\057\132\023\145\143\147\101\150\006\152\020" +
    "\154\115\156\074\160\034\164\047\001\001\000\054\004" +
    "\146\056\141\057\041\062\112\064\014\070\u0181\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u0180\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\054" +
    "\004\146\056\141\057\041\062\112\064\014\070\u017f\071" +
    "\052\072\142\073\122\100\071\111\064\116\057\132\023" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\054\004\146\056\141\057\041" +
    "\062\112\064\014\070\u017e\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\023\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\054\004\146\056\141\057\041\062\112\064\014\070\u017d" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\054\004\146\056\141\057" +
    "\041\062\112\064\014\070\u017c\071\052\072\142\073\122" +
    "\100\071\111\064\116\057\132\023\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\054\004\146\056\141\057\041\062\112\064\014\070" +
    "\u017b\071\052\072\142\073\122\100\071\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\054\004\146\056\141" +
    "\057\041\062\112\064\014\070\u017a\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\350\057\041\071\052\072\343\073" +
    "\122\100\071\116\346\132\u0186\150\006\152\020\154\115" +
    "\160\034\164\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\u0125\071\u011f\072\u011d\073\122\100\u0123" +
    "\116\u0120\152\020\154\115\155\u0188\157\u011c\160\u0122\001" +
    "\001\000\004\061\u0189\001\001\000\002\001\001\000\060" +
    "\004\146\043\u018b\044\334\056\335\057\041\062\112\064" +
    "\014\070\332\071\052\072\142\073\122\100\071\111\064" +
    "\116\057\132\333\145\143\147\101\150\006\152\020\154" +
    "\115\156\074\160\034\164\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\004\146\056\141\057\041\062\112\064\014" +
    "\070\u0197\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\023\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\060\004\146\011\u019a\014\113\056\141\057\041\062\112" +
    "\064\014\070\015\071\052\072\142\073\122\100\071\111" +
    "\064\116\057\132\023\145\143\147\101\150\006\152\020" +
    "\154\115\156\074\160\034\164\047\001\001\000\004\012" +
    "\u01a4\001\001\000\004\032\u019b\001\001\000\004\034\u019c" +
    "\001\001\000\002\001\001\000\060\004\146\011\u01a3\014" +
    "\113\056\141\057\041\062\112\064\014\070\015\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\002\001\001\000\054\004\146\056" +
    "\141\057\041\062\112\064\014\070\u01a0\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\060\004\146\011\u01a2\014" +
    "\113\056\141\057\041\062\112\064\014\070\015\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\004\146\011\271\013\264\014\113\033\u01a5\056\141" +
    "\057\041\062\112\064\014\070\015\071\052\072\142\073" +
    "\122\100\071\111\064\113\116\116\057\130\266\131\270" +
    "\132\023\136\133\137\022\140\044\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\004\035\u01a6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\146\056\141\057\041" +
    "\062\112\064\014\070\u01aa\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\023\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u01ad\001\001" +
    "\000\076\004\146\011\271\013\264\014\113\056\141\057" +
    "\041\062\112\064\014\070\015\071\052\072\142\073\122" +
    "\100\071\111\064\113\116\116\057\130\266\131\270\132" +
    "\023\136\133\137\022\140\044\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\004\012\u01af\001\001\000\076\004\146\011\271\013\264" +
    "\014\113\056\141\057\041\062\112\064\014\070\015\071" +
    "\052\072\142\073\122\100\071\111\064\113\116\116\057" +
    "\130\266\131\270\132\023\136\133\137\022\140\044\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\350\057\041\071\052\072\343\073" +
    "\122\100\071\101\u01b7\102\u01b8\116\346\132\u01b9\150\006" +
    "\152\020\154\115\160\034\164\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\350\057\041\071\052\072\343\073\122\100" +
    "\071\101\u01bc\102\u01b8\116\346\132\u01b9\150\006\152\020" +
    "\154\115\160\034\164\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\350\057\041\071\052\072\343" +
    "\073\122\100\071\102\u01bf\116\346\132\u01b9\150\006\152" +
    "\020\154\115\160\034\164\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u01c2\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\350\057\041\071\052\072\343\073\122\100\071\116\346" +
    "\132\u01c6\150\006\152\020\153\u01c7\154\115\160\034\164" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\350\057\041\071\052\072\343\073" +
    "\122\100\071\116\346\132\u01ca\150\006\152\020\154\115" +
    "\160\034\164\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\004\146\056\141\057\041\062\112\064\014" +
    "\070\u01ce\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\023\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\071\361\073\122\100\360\150\u0166\154\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\202\062\167\063\u01da\116\174\163\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\004\146\056\141\057\041\062\112\064\014" +
    "\070\u01de\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\023\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\004\026\u01e0\001\001\000\002\001\001\000\004\027\u01f1" +
    "\001\001\000\004\027\u01e3\001\001\000\002\001\001\000" +
    "\004\027\u01e5\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\004\146\056\141\057\041\062\112\064\014\070" +
    "\u01ed\071\052\072\142\073\122\100\071\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\004\030\u01e9\001\001" +
    "\000\004\012\u01ec\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\004\146\011\271\013\264\014\113\056\141" +
    "\057\041\062\112\064\014\070\015\071\052\072\142\073" +
    "\122\100\071\111\064\113\116\116\057\130\266\131\270" +
    "\132\023\136\133\137\022\140\044\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\004\030\u01ee\001\001\000\004\012\u01ef\001\001\000" +
    "\076\004\146\011\271\013\264\014\113\056\141\057\041" +
    "\062\112\064\014\070\015\071\052\072\142\073\122\100" +
    "\071\111\064\113\116\116\057\130\266\131\270\132\023" +
    "\136\133\137\022\140\044\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u01f3\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\004\146\056\141\057\041\062\112\064\014" +
    "\070\u01fc\071\052\072\142\073\122\100\071\111\064\116" +
    "\057\132\023\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\004" +
    "\146\056\141\057\041\062\112\064\014\070\u0203\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\202\062\167\063\u020a\116\174\163" +
    "\171\001\001\000\002\001\001\000\004\114\u020c\001\001" +
    "\000\002\001\001\000\010\004\247\117\u020f\143\u020e\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\247" +
    "\117\u0211\001\001\000\002\001\001\000\004\050\u0213\001" +
    "\001\000\016\051\u0215\121\u0214\122\u0222\124\u021f\125\u0219" +
    "\146\u021d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\u0231\001\001\000\002\001\001\000\004" +
    "\125\u022f\001\001\000\002\001\001\000\056\004\146\014" +
    "\u022e\056\141\057\041\062\112\064\014\070\015\071\052" +
    "\072\142\073\122\100\071\111\064\116\057\132\023\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\002\001\001\000\004\052\u0224\001" +
    "\001\000\004\112\u0225\001\001\000\002\001\001\000\016" +
    "\004\247\036\u0227\041\251\042\254\117\253\144\250\001" +
    "\001\000\002\001\001\000\004\123\u0229\001\001\000\002" +
    "\001\001\000\004\012\u022c\001\001\000\002\001\001\000" +
    "\076\004\146\011\271\013\264\014\113\056\141\057\041" +
    "\062\112\064\014\070\015\071\052\072\142\073\122\100" +
    "\071\111\064\113\116\116\057\130\266\131\270\132\023" +
    "\136\133\137\022\140\044\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\202\062\167\063\u0236\116" +
    "\174\163\171\001\001\000\002\001\001\000\014\004\202" +
    "\062\167\063\u0238\116\174\163\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\107\u024a" +
    "\154\u023a\001\001\000\002\001\001\000\034\004\350\057" +
    "\041\071\052\072\343\073\122\100\071\116\346\132\u0248" +
    "\150\006\152\020\154\115\160\034\164\047\001\001\000" +
    "\054\004\146\056\141\057\041\062\112\064\014\070\u0242" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\006\107\u0240\154\u023a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u0245\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\110\u0251\112\u0252\154\u0250\001" +
    "\001\000\004\112\u024f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\u0256\001\001\000\002" +
    "\001\001\000\016\004\247\036\u0258\041\251\042\254\117" +
    "\253\144\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u025b\001\001\000\076\004\146\011\271\013" +
    "\264\014\113\056\141\057\041\062\112\064\014\070\015" +
    "\071\052\072\142\073\122\100\071\111\064\113\116\116" +
    "\057\130\266\131\270\132\023\136\133\137\022\140\044" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\146\056" +
    "\u0262\057\041\062\112\064\014\070\332\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\u0261\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\350\057\041\071\052\072\343\073\122\100\071\116\346" +
    "\132\u0264\150\006\152\020\154\115\160\034\164\047\001" +
    "\001\000\004\020\u0265\001\001\000\002\001\001\000\036" +
    "\004\350\021\u0267\057\041\071\052\072\343\073\122\100" +
    "\071\116\346\132\u0268\150\006\152\020\154\115\160\034" +
    "\164\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\350\057\041\071\052\072\343\073\122\100\071" +
    "\116\346\132\u026a\150\006\152\020\154\115\160\034\164" +
    "\047\001\001\000\002\001\001\000\062\004\146\011\u026d" +
    "\014\113\023\u026e\056\141\057\041\062\112\064\014\070" +
    "\015\071\052\072\142\073\122\100\071\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\004\012\u026f\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\004\146\011" +
    "\271\013\264\014\113\056\141\057\041\062\112\064\014" +
    "\070\015\071\052\072\142\073\122\100\071\111\064\113" +
    "\116\116\057\130\266\131\270\132\023\136\133\137\022" +
    "\140\044\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\002\001\001\000\036" +
    "\004\350\021\u0272\057\041\071\052\072\343\073\122\100" +
    "\071\116\346\132\u0268\150\006\152\020\154\115\160\034" +
    "\164\047\001\001\000\004\020\u0273\001\001\000\002\001" +
    "\001\000\062\004\146\011\u026d\014\113\023\u0275\056\141" +
    "\057\041\062\112\064\014\070\015\071\052\072\142\073" +
    "\122\100\071\111\064\116\057\132\023\145\143\147\101" +
    "\150\006\152\020\154\115\156\074\160\034\164\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u027e\001\001\000\002\001\001\000\004\007" +
    "\u027c\001\001\000\002\001\001\000\100\004\146\010\156" +
    "\011\150\014\113\056\141\057\041\062\112\064\014\070" +
    "\015\071\052\072\142\073\122\100\071\111\064\113\116" +
    "\116\057\121\117\130\104\131\125\132\023\136\133\137" +
    "\022\140\044\145\143\147\101\150\006\152\020\154\115" +
    "\156\074\160\034\164\047\001\001\000\002\001\001\000" +
    "\100\004\146\010\156\011\150\014\113\056\141\057\041" +
    "\062\112\064\014\070\015\071\052\072\142\073\122\100" +
    "\071\111\064\113\116\116\057\121\117\130\104\131\125" +
    "\132\023\136\133\137\022\140\044\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\002\001\001\000\040\004\350\015\u0283\016\u0281\057" +
    "\041\071\052\072\343\073\122\100\071\116\346\132\u0282" +
    "\150\006\152\020\154\115\160\034\164\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\350\016\u0286\057\041\071\052\072" +
    "\343\073\122\100\071\116\346\132\u0282\150\006\152\020" +
    "\154\115\160\034\164\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u0289\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\004\146\011\271\013" +
    "\264\014\113\056\141\057\041\062\112\064\014\070\015" +
    "\071\052\072\142\073\122\100\071\111\064\113\116\116" +
    "\057\130\266\131\270\132\023\136\133\137\022\140\044" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\071\361\073\122\100\360\150" +
    "\357\154\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\107\u024a\154\u023a\001\001\000\006\107\u0240\154" +
    "\u023a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\071\361" +
    "\073\122\075\u02a4\076\u0132\077\u012f\100\360\112\u012e\150" +
    "\u0130\154\115\001\001\000\004\126\u02a5\001\001\000\004" +
    "\127\u02a9\001\001\000\060\004\146\043\u02a7\044\334\056" +
    "\335\057\041\062\112\064\014\070\332\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\333\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\151" +
    "\u02aa\001\001\000\002\001\001\000\024\071\361\073\122" +
    "\075\u02ac\076\u0132\077\u012f\100\360\112\u012e\150\u0130\154" +
    "\115\001\001\000\004\126\u02ad\001\001\000\002\001\001" +
    "\000\054\004\146\056\141\057\041\062\112\064\014\070" +
    "\u02af\071\052\072\142\073\122\100\071\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\141\u02b3\001\001\000\006\004\247\117" +
    "\u02ba\001\001\000\004\142\u02b4\001\001\000\002\001\001" +
    "\000\010\004\247\117\u020f\143\u02b6\001\001\000\002\001" +
    "\001\000\004\050\u02b8\001\001\000\016\051\u0215\121\u0214" +
    "\122\u0222\124\u021f\125\u0219\146\u021d\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\146\056\141\057\041" +
    "\062\112\064\014\070\u02bc\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\023\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\002\001\001\000\062\004\146\011\u02c0\014\113\031\u02bf" +
    "\056\141\057\041\062\112\064\014\070\015\071\052\072" +
    "\142\073\122\100\071\111\064\116\057\132\023\145\143" +
    "\147\101\150\006\152\020\154\115\156\074\160\034\164" +
    "\047\001\001\000\004\012\u02c1\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\004\146\011\271\013\264\014" +
    "\113\056\141\057\041\062\112\064\014\070\015\071\052" +
    "\072\142\073\122\100\071\111\064\113\116\116\057\130" +
    "\266\131\270\132\023\136\133\137\022\140\044\145\143" +
    "\147\101\150\006\152\020\154\115\156\074\160\034\164" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\202\062\167\063\u02c9\116\174\163\171" +
    "\001\001\000\002\001\001\000\014\004\202\062\167\063" +
    "\u02cb\116\174\163\171\001\001\000\002\001\001\000\004" +
    "\012\u02cd\001\001\000\076\004\146\011\271\013\264\014" +
    "\113\056\141\057\041\062\112\064\014\070\015\071\052" +
    "\072\142\073\122\100\071\111\064\113\116\116\057\130" +
    "\266\131\270\132\023\136\133\137\022\140\044\145\143" +
    "\147\101\150\006\152\020\154\115\156\074\160\034\164" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\247\117\u02d1\001\001\000\004\154\u02d2\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u02d5\001\001" +
    "\000\076\004\146\011\271\013\264\014\113\056\141\057" +
    "\041\062\112\064\014\070\015\071\052\072\142\073\122" +
    "\100\071\111\064\113\116\116\057\130\266\131\270\132" +
    "\023\136\133\137\022\140\044\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\010\133\u02d8\134\u02da\135\u02d9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\135\u02db\001" +
    "\001\000\002\001\001\000\006\004\247\117\u02dd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u02e1\001\001\000\076\004\146\011\271\013\264" +
    "\014\113\056\141\057\041\062\112\064\014\070\015\071" +
    "\052\072\142\073\122\100\071\111\064\113\116\116\057" +
    "\130\266\131\270\132\023\136\133\137\022\140\044\145" +
    "\143\147\101\150\006\152\020\154\115\156\074\160\034" +
    "\164\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\004\146\054\u02e8" +
    "\055\u02e9\056\141\057\041\062\112\064\014\070\u02e7\071" +
    "\052\072\142\073\122\100\071\111\064\116\057\132\023" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\004\146\056\141\057\041\062" +
    "\112\064\014\070\u02eb\071\052\072\142\073\122\100\071" +
    "\111\064\116\057\132\023\145\143\147\101\150\006\152" +
    "\020\154\115\156\074\160\034\164\047\001\001\000\002" +
    "\001\001\000\060\004\146\054\u02ed\055\u02e9\056\141\057" +
    "\041\062\112\064\014\070\u02e7\071\052\072\142\073\122" +
    "\100\071\111\064\116\057\132\023\145\143\147\101\150" +
    "\006\152\020\154\115\156\074\160\034\164\047\001\001" +
    "\000\002\001\001\000\060\004\146\054\u02ef\055\u02e9\056" +
    "\141\057\041\062\112\064\014\070\u02e7\071\052\072\142" +
    "\073\122\100\071\111\064\116\057\132\023\145\143\147" +
    "\101\150\006\152\020\154\115\156\074\160\034\164\047" +
    "\001\001\000\002\001\001\000\062\004\146\011\u02f3\014" +
    "\113\022\u02f1\056\141\057\041\062\112\064\014\070\015" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\002\001\001\000\004\012" +
    "\u02f4\001\001\000\002\001\001\000\076\004\146\011\271" +
    "\013\264\014\113\056\141\057\041\062\112\064\014\070" +
    "\015\071\052\072\142\073\122\100\071\111\064\113\116" +
    "\116\057\130\266\131\270\132\023\136\133\137\022\140" +
    "\044\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\002\001\001\000\034\004" +
    "\350\057\041\071\052\072\343\073\122\100\071\116\346" +
    "\132\u02f7\150\006\152\020\154\115\160\034\164\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u0302\001\001\000\002\001\001\000\006\004\u02fb" +
    "\005\u0301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\004\146" +
    "\056\141\057\041\062\112\064\014\070\u030d\071\052\072" +
    "\142\073\122\100\071\103\u030f\104\u030e\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\036\004\350\057\041" +
    "\071\052\072\343\073\122\100\071\115\u031e\116\346\132" +
    "\345\150\006\152\020\154\115\160\034\164\047\001\001" +
    "\000\002\001\001\000\004\066\u0312\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\146\056\141\057\041" +
    "\062\112\064\014\070\u0314\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\023\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\002\001\001\000\036\004\350\057\041\071\052\072\343" +
    "\073\122\100\071\115\u0319\116\346\132\345\150\006\152" +
    "\020\154\115\160\034\164\047\001\001\000\002\001\001" +
    "\000\054\004\146\056\141\057\041\062\112\064\014\070" +
    "\u0317\071\052\072\142\073\122\100\071\111\064\116\057" +
    "\132\023\145\143\147\101\150\006\152\020\154\115\156" +
    "\074\160\034\164\047\001\001\000\036\004\350\057\041" +
    "\071\052\072\343\073\122\100\071\115\u0318\116\346\132" +
    "\345\150\006\152\020\154\115\160\034\164\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\146\056\141\057\041\062\112\064\014\070\u031c" +
    "\071\052\072\142\073\122\100\071\111\064\116\057\132" +
    "\023\145\143\147\101\150\006\152\020\154\115\156\074" +
    "\160\034\164\047\001\001\000\036\004\350\057\041\071" +
    "\052\072\343\073\122\100\071\115\u031d\116\346\132\345" +
    "\150\006\152\020\154\115\160\034\164\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\350\057\041\071" +
    "\052\072\343\073\122\100\071\116\346\132\u0324\145\u0323" +
    "\150\006\152\020\154\115\160\034\164\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\004\146\056\141\057\041\062\112\064\014\070\u0326\071" +
    "\052\072\142\073\122\100\071\111\064\116\057\132\023" +
    "\145\143\147\101\150\006\152\020\154\115\156\074\160" +
    "\034\164\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u032a\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\004\146\043\u032c\044\334\056\335\057\041" +
    "\062\112\064\014\070\332\071\052\072\142\073\122\100" +
    "\071\111\064\116\057\132\333\145\143\147\101\150\006" +
    "\152\020\154\115\156\074\160\034\164\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TwigAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TwigAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TwigAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = new Integer(Modifiers.AccPublic);
	protected final static Integer PRIVATE = new Integer(Modifiers.AccPrivate);
	protected final static Integer PROTECTED = new Integer(Modifiers.AccProtected);
	protected final static Integer ABSTRACT = new Integer(Modifiers.AccAbstract);
	protected final static Integer FINAL = new Integer(Modifiers.AccFinal);
	protected final static Integer STATIC = new Integer(Modifiers.AccStatic);
	
	AST ast;
  
	public final void setAST (AST ast) {
		this.ast = ast;
	}

	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStart(), property.getEnd(), ast, dispatcher, (Variable)property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStart(), property.getEnd(), ast ,dispatcher, (FunctionInvocation)property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		// System.err.print(message);
  		// if (info instanceof Symbol)
		//	if (((Symbol)info).left != -1)
		//		System.err.println(" at character " + ((Symbol)info).left + " of input");
		//	else System.err.println("");
	    // else 
	   	//	System.err.println("");
    }
	

	public void report_fatal_error(
    String   message, 
    Object   info)
    throws java.lang.Exception
    {
      /* stop parsing (not really necessary since we throw an exception, but) */
      done_parsing();

      /* use the normal error message reporting to put out the message */
      report_error(message, info);

      /* throw an exception */
     // throw new Exception("Can't recover from previous error(s)");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TwigAstParser$actions {
  private final TwigAstParser parser;

  /** Constructor */
  CUP$TwigAstParser$actions(TwigAstParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TwigAstParser$do_action(
    int                        CUP$TwigAstParser$act_num,
    java_cup.runtime.lr_parser CUP$TwigAstParser$parser,
    java.util.Stack            CUP$TwigAstParser$stack,
    int                        CUP$TwigAstParser$top)
    throws java.lang.Exception
    {
      if (CUP$TwigAstParser$act_num < 100) {
        return CUP$TwigAstParser$do_action1(
             CUP$TwigAstParser$act_num, CUP$TwigAstParser$parser,CUP$TwigAstParser$stack,CUP$TwigAstParser$top);
      }
      else       if (CUP$TwigAstParser$act_num < 200) {
        return CUP$TwigAstParser$do_action2(
             CUP$TwigAstParser$act_num, CUP$TwigAstParser$parser,CUP$TwigAstParser$stack,CUP$TwigAstParser$top);
      }
      else       if (CUP$TwigAstParser$act_num < 300) {
        return CUP$TwigAstParser$do_action3(
             CUP$TwigAstParser$act_num, CUP$TwigAstParser$parser,CUP$TwigAstParser$stack,CUP$TwigAstParser$top);
      }
      else  {
        return CUP$TwigAstParser$do_action4(
             CUP$TwigAstParser$act_num, CUP$TwigAstParser$parser,CUP$TwigAstParser$stack,CUP$TwigAstParser$top);
      }
    }


  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TwigAstParser$do_action1(
    int                        CUP$TwigAstParser$act_num,
    java_cup.runtime.lr_parser CUP$TwigAstParser$parser,
    java.util.Stack            CUP$TwigAstParser$stack,
    int                        CUP$TwigAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TwigAstParser$result;

      /* select the action based on the action number */
      switch (CUP$TwigAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	TwigAstLexer TwigAstLexer = (TwigAstLexer) parser.getScanner();
	List commentList = TwigAstLexer.getCommentList();
	RESULT = new Program(sListleft, sListright, parser.ast, sList, commentList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(1/*thestart*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		RESULT = start_val;
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$TwigAstParser$parser.done_parsing();
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= T_STRING 
            {
              List RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(2/*namespace_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name ::= namespace_name T_NS_SEPARATOR T_STRING 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(2/*namespace_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name ::= T_DEFINE 
            {
              List RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Identifier(nleft, nright, parser.ast, n));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(2/*namespace_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	if(statement != null) {
		if (!(statement instanceof NamespaceDeclaration) && sList.size() > 0) {
			Statement lastStatement = (Statement) ((LinkedList) sList).getLast();
			//EmptyStatement length equals to 2,means it is "?>",equals to 1,means it is ";"
			if (!(statement instanceof EmptyStatement && statement.getLength() == 2) && lastStatement instanceof NamespaceDeclaration && !((NamespaceDeclaration)lastStatement).isBracketed()) {
				((NamespaceDeclaration)lastStatement).addStatement(statement);
			} else {
				sList.add(statement);
			}
		} else {
			sList.add(statement);
		}
	}
	RESULT = sList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(5/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(5/*top_statement_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= T_NAMESPACE namespace_name T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast, 
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null, false);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_NAMESPACE namespace_name T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, false, false),  
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // top_statement ::= T_NAMESPACE T_CURLY_OPEN top_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceDeclaration(sleft, eright, parser.ast, null, 
		new Block(tokenleft, eright, parser.ast, sList), true);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new UseStatement(sleft, eright, parser.ast, list);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(6/*top_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(useDecl);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(4/*use_declarations*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // use_declarations ::= use_declaration 
            {
              List RESULT = null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		UseStatementPart useDecl = (UseStatementPart)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(useDecl);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(4/*use_declarations*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // use_declaration ::= namespace_name 
            {
              UseStatementPart RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new UseStatementPart(listleft, listright, parser.ast, 
		new NamespaceName(listleft, listright, parser.ast, list, false, false), null);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(3/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new UseStatementPart(listleft, aliasNameright, parser.ast, 
		new NamespaceName(listleft, listright, parser.ast, list, false, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(3/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UseStatementPart RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new UseStatementPart(listleft, listright, parser.ast, 
		new NamespaceName(listleft, listright, parser.ast, list, true, false), null);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(3/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UseStatementPart RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new UseStatementPart(listleft, aliasNameright, parser.ast,
		new NamespaceName(listleft, listright, parser.ast, list, true, false),
		new Identifier(aliasNameleft, aliasNameright, parser.ast, aliasName));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(3/*use_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT = null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	// Ignore null statements
	if(statement != null) {
		sList.add(statement);
	}		
	RESULT = sList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(8/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inner_statement_list ::= 
            {
              List RESULT = null;
		 
	RESULT = new LinkedList(); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(8/*inner_statement_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inner_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(9/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(9/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(9/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(9/*inner_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= unticked_statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = statement; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new GotoLabel(labelleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(7/*statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Block(tokenleft, eright, parser.ast, sList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int s = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	RESULT = new IfStatement(tokenleft, iffalseright, parser.ast, cond, iftrue, falseStatement);		

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-9)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int s = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(s, iffalseright, parser.ast, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, parser.ast, ifTrueStatementList, false);
	RESULT = new IfStatement(tokenleft, eright, parser.ast, cond, block, falseStatement);		

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new WhileStatement(tokenleft, statementright, parser.ast, expr, statement);			

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new DoStatement(tokenleft, eright, parser.ast, expr, statement);			

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).value;
		int condsleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List conds = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
				
	RESULT = new ForStatement(tokenleft, statementright, parser.ast, initializations, conds, increasements, statement);			

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new SwitchStatement(tokenleft, caseBlockright, parser.ast, expr, caseBlock);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, eright, parser.ast); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new BreakStatement(tokenleft, eright, parser.ast, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ContinueStatement(tokenleft, eright, parser.ast, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ReturnStatement(tokenleft, eright, parser.ast, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new GlobalStatement(sleft, eright, parser.ast, list);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new StaticStatement(sleft, eright, parser.ast, list);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new EchoStatement(sleft, eright, parser.ast, exprList); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT = null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new InLineHtml(htmlleft, htmlright, parser.ast);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ExpressionStatement(exprleft, eright, parser.ast, expr);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(expr);
	RESULT = new ExpressionStatement(sleft, eright, parser.ast, 
		new FunctionInvocation(sleft, exprright, parser.ast,
			new FunctionName(sleft, sright, parser.ast, 
				new Identifier(sleft, sright, parser.ast, "use")), list));	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ExpressionStatement(sleft, eright, parser.ast, 
		new FunctionInvocation(sleft, closeParright, parser.ast,
			new FunctionName(sleft, sright, parser.ast,
				new Identifier(sleft, sright, parser.ast, "unset")), list));	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	ForEachStatement s = null;
	if (arg == null) {
		s = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		s = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = s;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	ForEachStatement s = null;
	if (arg == null) {
		s = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, statement);
	} else {
		s = new ForEachStatement(tokenleft, statementright, parser.ast, expr, var, arg, statement);
	}
	RESULT = s;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new DeclareStatement(sleft, statementright, parser.ast, lists[0], lists[1], statement);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright, parser.ast); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-12)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-12)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, parser.ast, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	RESULT = new TryStatement(sleft, catchesListright, parser.ast, tryBlock, catchesList);	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ThrowStatement(tokenleft, eright, parser.ast, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new GotoStatement(sleft, eright, parser.ast, new Identifier(labelleft, labelright, parser.ast, label));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= error 
            {
              Statement RESULT = null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright, parser.ast);
	RESULT = error;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(10/*unticked_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(89/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // additional_catches ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(89/*additional_catches*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT = null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(90/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(90/*non_empty_additional_catches*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT = null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new CatchClause(catch_wordleft, catchBlockEndright, parser.ast, className,
		new Variable(varleft, varright, parser.ast, var),
		new Block(catchBlockStartleft, catchBlockEndright, parser.ast, catchList));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(91/*additional_catch*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unset_variables ::= unset_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(11/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(11/*unset_variables*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unset_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(12/*unset_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(13/*use_filename*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(sleft, eright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(13/*use_filename*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT = null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = functionDeclaration;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(86/*function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT = null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = classDeclaration;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(87/*class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // is_reference ::= 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.FALSE;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(40/*is_reference*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT = null;
		
	RESULT = Boolean.TRUE;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(40/*is_reference*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new FunctionDeclaration(sleft, blockEndright, parser.ast,
		new Identifier(fnleft, fnright, parser.ast, fn), paramList,
		new Block(blockStartleft, blockEndright, parser.ast, sList), isReference.booleanValue());

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(92/*unticked_function_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Expression superClass = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ClassDeclaration(modifierleft ,blockEndright, parser.ast, modifier.intValue(),
		new Identifier(classNameleft, classNameright, parser.ast, className), superClass, interfaces,
		new Block(blockStartleft, blockEndright, parser.ast, sList));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(93/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new InterfaceDeclaration(sleft ,blockEndright, parser.ast, 
		new Identifier(classNameleft, classNameright, parser.ast, className), interfaces, 
		new Block(blockStartleft, blockEndright, parser.ast, sList));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(93/*unticked_class_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // class_entry_type ::= T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_NONE);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(94/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_ABSTRACT);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(94/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // class_entry_type ::= T_FINAL T_CLASS 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(ClassDeclaration.MODIFIER_FINAL);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(94/*class_entry_type*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // extends_from ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(95/*extends_from*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = className;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(95/*extends_from*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(73/*interface_entry*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // interface_extends_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(74/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(74/*interface_extends_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // implements_list ::= 
            {
              List RESULT = null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(96/*implements_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(96/*implements_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(97/*interface_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(className);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(97/*interface_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // foreach_optional_arg ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(14/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(14/*foreach_optional_arg*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // foreach_variable ::= variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(15/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Reference (sleft, varright, parser.ast, var);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(15/*foreach_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(16/*for_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // foreach_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(17/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(17/*foreach_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declare_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(18/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE 
            {
              Statement RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(18/*declare_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	listKeys.add(new Identifier(keyleft, keyright, parser.ast, key));
	listValues.add(value);

	RESULT = new List[] { listKeys, listValues };

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(19/*declare_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TwigAstParser$do_action2(
    int                        CUP$TwigAstParser$act_num,
    java_cup.runtime.lr_parser CUP$TwigAstParser$parser,
    java.util.Stack            CUP$TwigAstParser$stack,
    int                        CUP$TwigAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TwigAstParser$result;

      /* select the action based on the action number */
      switch (CUP$TwigAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT = null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	lists[0].add(new Identifier(keyleft, keyright, parser.ast, key));
	lists[1].add(value);
	RESULT = lists;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(19/*declare_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(20/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Block(sleft, eright, parser.ast, caseList);	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(20/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);	
	RESULT = block; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(20/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH 
            {
              Block RESULT = null;
		int startleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Block block = new Block(startleft, endright, parser.ast, caseList, false);	
	RESULT = block; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(20/*switch_case_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // case_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(21/*case_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(21/*case_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT = null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, parser.ast, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(21/*case_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(22/*case_separator*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(22/*case_separator*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // while_statement ::= statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(23/*while_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Block block = new Block(colonleft, endright, parser.ast, statementList, false);
	RESULT = block;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(23/*while_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(24/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
			
	((LinkedList)elseifList[0]).addFirst(cond);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));
	RESULT = elseifList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(24/*elseif_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // new_elseif_list ::= 
            {
              List[] RESULT = null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	RESULT = new List[] { listConditions, listStatements, listTokens };

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(25/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT = null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List sList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
			
	Block block = new Block(colonleft, sListright, parser.ast, sList, false);
	((LinkedList)elseifList[0]).addFirst(cond);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));
	RESULT = elseifList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(25/*new_elseif_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(26/*else_single*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_single ::= T_ELSE statement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(26/*else_single*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // new_else_single ::= 
            {
              Statement RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(27/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT = null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Block(colonleft, listright, parser.ast, list, false);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(27/*new_else_single*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(28/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parameter_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(28/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // non_empty_parameter_list ::= parameter 
            {
              List RESULT = null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(31/*non_empty_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, v);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(32/*parameter*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, varright, parser.ast, classType, ref_var);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(32/*parameter*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	int s = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, v, scalar);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(32/*parameter*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT = null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Expression classType = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	int s = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, parser.ast, var);
	Reference ref_var = new Reference (refleft, varright, parser.ast, v);
	RESULT = new FormalParameter(s, scalarright, parser.ast, classType, ref_var, scalar);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(32/*parameter*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // optional_class_type ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(98/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // optional_class_type ::= fully_qualified_class_name 
            {
              Expression RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		NamespaceName className = (NamespaceName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = className;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(98/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // optional_class_type ::= T_ARRAY 
            {
              Expression RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Identifier(arrayleft, arrayright, parser.ast, "array");

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(98/*optional_class_type*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = paramsList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(33/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // function_call_parameter_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(33/*function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	paramsList.add(var);
	RESULT = paramsList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Expression var_ref = new Reference(sleft, varright, parser.ast, var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(34/*non_empty_function_call_parameter_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(35/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // global_var_list ::= global_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(35/*global_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Variable(varleft, varright, parser.ast, var);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(36/*global_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, varright, parser.ast, var);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(36/*global_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, varName);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(36/*global_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	list.add(v);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(37/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(37/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // static_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(37/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var); 
	Assignment assignment = new Assignment(varleft, exprright, parser.ast, v, Assignment.OP_EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(37/*static_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(38/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // class_statement_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(38/*class_statement_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new FieldsDeclaration(modifierleft, eright, parser.ast, modifier.intValue(), decList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ConstantDeclaration(listleft, eright, parser.ast, list);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	int methodStart = modifier == null ? sleft : modifierleft;
	modifier = modifier == null ? TwigAstParser.PUBLIC : modifier;
	Identifier functionId = new Identifier(fnleft, fnright, parser.ast, fn);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(sleft, bodyright, parser.ast, functionId, paramList, body, isReference.booleanValue());
	RESULT = new MethodDeclaration(methodStart, bodyright, parser.ast, modifier.intValue(), functionDeclaration, true);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // class_statement ::= T_VAR_COMMENT unticked_statement 
            {
              Statement RESULT = null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = statement;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(39/*class_statement*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // method_body ::= T_SEMICOLON 
            {
              Block RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(81/*method_body*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Block block = new Block(sleft, eright, parser.ast, list);
	RESULT = block;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(81/*method_body*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(100/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT = null;
		
	RESULT = TwigAstParser.PUBLIC;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(100/*variable_modifiers*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // method_modifiers ::= 
            {
              Integer RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(80/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(80/*method_modifiers*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT = null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(82/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(82/*non_empty_member_modifiers*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT = null;
		
	RESULT = TwigAstParser.PUBLIC;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT = null;
		
	RESULT = TwigAstParser.PROTECTED;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT = null;
		
	RESULT = TwigAstParser.PRIVATE;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // member_modifier ::= T_STATIC 
            {
              Integer RESULT = null;
		
	RESULT = TwigAstParser.STATIC;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT = null;
		
	RESULT = TwigAstParser.ABSTRACT;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // member_modifier ::= T_FINAL 
            {
              Integer RESULT = null;
		
	RESULT = TwigAstParser.FINAL;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(83/*member_modifier*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(78/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(78/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(78/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, parser.ast, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(78/*class_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(79/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT = null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, parser.ast, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(79/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(41/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // echo_expr_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(41/*echo_expr_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // for_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(42/*for_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // for_expr ::= non_empty_for_expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = exprList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(42/*for_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT = null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(43/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // non_empty_for_expr ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(43/*non_empty_for_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	ListVariable vars = new ListVariable(sleft, closeright, parser.ast, varList);
	RESULT = new Assignment(sleft, exprright, parser.ast, vars, Assignment.OP_EQUAL, expr);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var, Assignment.OP_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, refvarright, parser.ast, var, Assignment.OP_EQUAL, new Reference(reftokenleft, refvarright, parser.ast, refvar)); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Assignment(varleft, ctorright, parser.ast, var, Assignment.OP_EQUAL, 
		new Reference(reftokenleft, ctorright, parser.ast, 
			new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor)));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ClassInstanceCreation(sleft, ctorright, parser.ast, className, ctor);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new CloneExpression(sleft, exprright, parser.ast, expr);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_PLUS_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MINUS_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MUL_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 	
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_DIV_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_CONCAT_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_MOD_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_AND_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_OR_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_XOR_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SL_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Assignment(varleft, exprright, parser.ast, var , Assignment.OP_SR_EQUAL, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_INC); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_INC); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, parser.ast, var , PostfixExpression.OP_DEC); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TwigAstParser$do_action3(
    int                        CUP$TwigAstParser$act_num,
    java_cup.runtime.lr_parser CUP$TwigAstParser$parser,
    java.util.Stack            CUP$TwigAstParser$stack,
    int                        CUP$TwigAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TwigAstParser$result;

      /* select the action based on the action number */
      switch (CUP$TwigAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, parser.ast, var , PrefixExpression.OP_DEC); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_OR, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_BOOL_AND, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_OR, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_AND, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_STRING_XOR, expr2);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_OR, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_AND, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_XOR, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_CONCAT, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_PLUS, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MINUS, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MUL, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_DIV, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_MOD, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SL, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_SR, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_PLUS); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_MINUS); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_NOT); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, parser.ast, expr , UnaryOperation.OP_TILDA); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_IDENTICAL, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_IDENTICAL, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_EQUAL, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_NOT_EQUAL, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_RGREATER, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_LGREATER, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT = null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, parser.ast, expr1 , InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, parser.ast, expr , className); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ParenthesisExpression(sleft, eright, parser.ast, expr);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond , ifTrue, ifFalse); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new ConditionalExpression(condleft, ifFalseright, parser.ast, cond , null, ifFalse); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = expr;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_INT); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_REAL); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_STRING); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_ARRAY); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_OBJECT); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_BOOL); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT = null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, parser.ast, expr , CastExpression.TYPE_UNSET); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, 
			new Identifier(sleft, sright, parser.ast, s)), expList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new IgnoreError(sleft, exprright, parser.ast, expr);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = scalar; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new BackTickExpression(sleft, eright, parser.ast, list);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	RESULT = new FunctionInvocation(sleft, exprright, parser.ast,
		new FunctionName(sleft, sright, parser.ast, 
			new Identifier(sleft, sright, parser.ast, "print")), expList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, parser.ast, paramList, varsList, 
		new Block(blockStartleft, blockEndright, parser.ast, list), isReference.booleanValue());

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(44/*expr_without_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // lexical_vars ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(29/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(29/*lexical_vars*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	Variable v = new Variable(varleft, varright, parser.ast, var);
	list.add(v);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(30/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(30/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Variable(varleft, varright, parser.ast, var));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(30/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Reference (refleft, varright, parser.ast, new Variable(varleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(30/*lexical_var_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(listleft, eright, parser.ast, 
		new FunctionName(listleft, listright, parser.ast, 
			new NamespaceName(listleft, listright, parser.ast, list, false, false)), parameters);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast, 
		new FunctionName(sleft, listright, parser.ast, 
			new NamespaceName(sleft, listright, parser.ast, list, false, true)), parameters);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast, 
		new FunctionName(sleft, listright, parser.ast, 
			new NamespaceName(sleft, listright, parser.ast, list, true, false)), parameters);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className, 
		new FunctionInvocation(fnleft, eright, parser.ast,
			new FunctionName(fnleft, fnright, parser.ast, 
				new Identifier(fnleft, fnright, parser.ast, fn)), parameters)); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className, 
		new FunctionInvocation(reflectionNameleft, eright, parser.ast, 
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters)); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className, 
		new FunctionInvocation(fnleft, eright, parser.ast, 
			new FunctionName(fnleft, fnright, parser.ast, 
				new Identifier(fnleft, fnright, parser.ast, fn)), parameters)); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new StaticMethodInvocation(classNameleft, eright, parser.ast, className, 
		new FunctionInvocation(reflectionNameleft, eright, parser.ast, 
			new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters)); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(reflectionNameleft, eright, parser.ast, 
		new FunctionName(reflectionNameleft, reflectionNameright, parser.ast, reflectionName), parameters); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(45/*function_call*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // class_name ::= T_STATIC 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Identifier(sleft, sright, parser.ast, "static");

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(76/*class_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // class_name ::= namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(76/*class_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, true);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(76/*class_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, true, false);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(76/*class_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // fully_qualified_class_name ::= namespace_name 
            {
              NamespaceName RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(77/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(77/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              NamespaceName RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(77/*fully_qualified_class_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // class_name_reference ::= class_name 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ClassName(classNameleft, classNameright, parser.ast, className);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(107/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = className;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(107/*class_name_reference*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	
	// create class name from the dispatch
	RESULT = new ClassName(varleft, propertyListright, parser.ast, dispatch);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(109/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // dynamic_class_name_reference ::= base_variable 
            {
              ClassName RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	 RESULT = new ClassName(varleft, varright, parser.ast, var);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(109/*dynamic_class_name_reference*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(111/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(111/*dynamic_class_name_variable_properties*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(112/*dynamic_class_name_variable_property*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // exit_expr ::= 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(46/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(46/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		
	RESULT = expr;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(46/*exit_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // backticks_expr ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(68/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(68/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // backticks_expr ::= encaps_list 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(68/*backticks_expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ctor_arguments ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(47/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		
	RESULT = paramsList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(47/*ctor_arguments*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_INT);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_REAL);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // common_scalar ::= T_LINE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__LINE__", Scalar.TYPE_SYSTEM);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // common_scalar ::= T_FILE 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FILE__", Scalar.TYPE_SYSTEM);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // common_scalar ::= T_DIR 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__DIR__", Scalar.TYPE_SYSTEM);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__CLASS__", Scalar.TYPE_SYSTEM);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__METHOD__", Scalar.TYPE_SYSTEM);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__FUNCTION__", Scalar.TYPE_SYSTEM);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // common_scalar ::= T_NS_C 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(48/*common_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // static_scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // static_scalar ::= namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	if (list.size() == 1) {
		RESULT = new Scalar(listleft, listright, parser.ast, ((Identifier)list.get(0)).getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
	}

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_PLUS);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new UnaryOperation(sleft, exprright, parser.ast, expr, UnaryOperation.OP_MINUS);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TwigAstParser$do_action4(
    int                        CUP$TwigAstParser$act_num,
    java_cup.runtime.lr_parser CUP$TwigAstParser$parser,
    java.util.Stack            CUP$TwigAstParser$stack,
    int                        CUP$TwigAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TwigAstParser$result;

      /* select the action based on the action number */
      switch (CUP$TwigAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ArrayCreation(sleft, eright, parser.ast, list);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // static_scalar ::= static_class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(49/*static_scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, 
		new Identifier(varNameleft, varNameright, parser.ast, varName)); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(113/*static_class_constant*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(scalarleft, scalarright, parser.ast, scalar, Scalar.TYPE_STRING);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // scalar ::= class_constant 
            {
              Expression RESULT = null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = classConstant;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // scalar ::= namespace_name 
            {
              Expression RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	if (list.size() == 1) {
		RESULT = new Scalar(listleft, listright, parser.ast, ((Identifier)list.get(0)).getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = new NamespaceName(listleft, listright, parser.ast, list, false, false);
	}

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, false, true);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new NamespaceName(sleft, listright, parser.ast, list, true, false);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // scalar ::= common_scalar 
            {
              Expression RESULT = null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = scalar;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Quote(sleft, eright, parser.ast, list, Quote.QT_QUOTE);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(50/*scalar*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // static_array_pair_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(51/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(51/*static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // possible_comma ::= 
            {
              Object RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(52/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // possible_comma ::= T_COMMA 
            {
              Object RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(52/*possible_comma*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(53/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(53/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(53/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(valueleft, valueright, parser.ast, value));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(53/*non_empty_static_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // expr ::= r_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(54/*expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // expr ::= expr_without_variable 
            {
              Expression RESULT = null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = ewv; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(54/*expr*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // r_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(99/*r_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // w_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(75/*w_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // rw_variable ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(101/*rw_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	// get the last property 
	VariableBase firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		FunctionName fn = new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty);
		firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, parser.ast, fn, paramsList);
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	RESULT = dispatch;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(88/*variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(88/*variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT = null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase variableProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(85/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // variable_properties ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(85/*variable_properties*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              VariableBase RESULT = null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	if (paramsList == null) {
		RESULT = memberProperty;
	} else {
		RESULT = new FunctionInvocation(memberPropertyleft, paramsListright, parser.ast, 
			new FunctionName(memberPropertyleft, memberPropertyright, parser.ast, memberProperty), paramsList);
	}

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(103/*variable_property*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT = null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(84/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // method_or_not ::= 
            {
              List RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(84/*method_or_not*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(102/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);				
	}
	RESULT = finalVar;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(102/*variable_without_objects*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(104/*static_member*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, parser.ast, className, var);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(104/*static_member*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // variable_class_name ::= reference_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(56/*variable_class_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(114/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(114/*base_variable_with_function_calls*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // base_variable ::= reference_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT = null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, parser.ast, finalVar);				
	}
	RESULT = finalVar;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // base_variable ::= static_member 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase s = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = s;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(110/*base_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(55/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(55/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // reference_variable ::= compound_variable 
            {
              Variable RESULT = null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = comp_var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(55/*reference_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // compound_variable ::= tracked_variable 
            {
              Variable RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(57/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	ReflectionVariable var = new ReflectionVariable(sleft, eright, parser.ast, expr);
	RESULT = var;	 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(57/*compound_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // dim_offset ::= 
            {
              Expression RESULT = null;
		 
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(58/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // dim_offset ::= expr 
            {
              Expression RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = expr; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(58/*dim_offset*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // object_property ::= object_dim_list 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 
	RESULT = var; 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(59/*object_property*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // object_property ::= variable_without_objects 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(59/*object_property*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varleft, eright, parser.ast, var, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(60/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varleft, eright, parser.ast, var, index, ArrayAccess.VARIABLE_HASHTABLE);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(60/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // object_dim_list ::= variable_name 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = var; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(60/*object_dim_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // variable_name ::= string_st 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(61/*variable_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(61/*variable_name*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT = null;
		
	RESULT = new Integer(1);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(62/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT = null;
		int refleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(62/*simple_indirect_reference*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT = null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	if (element != null) {
		listElements.add(element);
	} else {
		listElements.add(new Variable(elementleft, elementright, parser.ast, ""));
	}	
	RESULT = listElements;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(63/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // assignment_list ::= assignment_list_element 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	} else {
		listElements.add(new Variable(varleft, varright, parser.ast, ""));
	}
	RESULT = listElements;
	;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(63/*assignment_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // assignment_list_element ::= variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(64/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ListVariable(sleft, eright, parser.ast, varList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(64/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // assignment_list_element ::= 
            {
              VariableBase RESULT = null;
		
	RESULT = null;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(64/*assignment_list_element*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // array_pair_list ::= 
            {
              List RESULT = null;
		
	RESULT = new LinkedList();

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(65/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(65/*array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, valueright, parser.ast, key, value));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // non_empty_array_pair_list ::= expr 
            {
              List RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(exprleft, exprright, parser.ast, expr));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT = null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(keyleft, varright, parser.ast, key, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new ArrayElement(sleft, varright, parser.ast, new Reference(sleft, varright, parser.ast, var)));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(66/*non_empty_array_pair_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(var);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(67/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(67/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // encaps_list ::= encaps_var 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(67/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, parser.ast, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	list.add(var);
	RESULT = list;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(67/*encaps_list*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(varNameleft, eright, parser.ast, varName, index, ArrayAccess.VARIABLE_ARRAY);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = parser.createDispatch(var, new Variable(stringleft, stringright, parser.ast, string));

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, expr);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ArrayAccess(sleft, eright, parser.ast,
		new Variable(varNameleft, varNameright, parser.ast, varName), index, ArrayAccess.VARIABLE_ARRAY);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new ReflectionVariable(sleft, eright, parser.ast, var);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(69/*encaps_var*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // encaps_var_offset ::= string_st 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Identifier(stringleft, stringright, parser.ast, string);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Scalar(numleft,numright, parser.ast, num, Scalar.TYPE_REAL);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = var;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(70/*encaps_var_offset*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new FunctionInvocation(sleft, eright, parser.ast, 
		new FunctionName(sleft, sright, parser.ast, 
			new Identifier(sleft, sright, parser.ast, "isset")), varList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	LinkedList varList = new LinkedList();
	varList.add(var);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast, 
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "empty")), varList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_INCLUDE_ONCE);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	RESULT = new FunctionInvocation(sleft, eright, parser.ast, 
		new FunctionName(sleft, sright, parser.ast, new Identifier(sleft, sright, parser.ast, "eval")), exprList);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT = null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Include(includeleft, exprright, parser.ast, expr, Include.IT_REQUIRE_ONCE);

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(71/*internal_functions_in_yacc*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // isset_variables ::= variable 
            {
              List RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;	

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(105/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(105/*isset_variables*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, 
		new Identifier(varNameleft, varNameright, parser.ast, varName)); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(108/*class_constant*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).right;
		Variable className = (Variable)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varNameright, parser.ast, className, 
		new Identifier(varNameleft, varNameright, parser.ast, varName)); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(108/*class_constant*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		
	RESULT = new Variable(varNameleft, varNameright, parser.ast, varName); 

              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(106/*tracked_variable*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // string_st ::= T_STRING 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = value; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(72/*string_st*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // string_st ::= T_DEFINE 
            {
              String RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).value;
		 RESULT = value; 
              CUP$TwigAstParser$result = new java_cup.runtime.Symbol(72/*string_st*/, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$TwigAstParser$stack.elementAt(CUP$TwigAstParser$top-0)).right, RESULT);
            }
          return CUP$TwigAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

